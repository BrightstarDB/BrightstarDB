Building dotNetRdf for B*

1) Checkout the correct version of dotNetRdf/Trunk (note the capital T). The current version is specified in src/dotnetrdf/CurrentBuildVersion.txt in the B* source tree.

2) Open the dotNetRdf.sln file in VS and it will prompt to upgrade to VS 2010. Click through the upgrade process - allow it to upgrade the .NET version for the websites as it goes through.

3) There are a bunch of projects in here that we don't need and that won't compile without certain pre-requisites. 
   The only projects that is really needed is dotNetRdf. The only other project that compiles without other dependencies is dotNetRdfTest (not the UnitTest project)

4) IMPORTANT: Change the public key used to sign the dotNetRdf assemblies to the NetworkedPlanet key. 
   This is critical because if we release with the dotNetRdf key, its possible that someone could hijack our build of the assembly and do something nasty with it.
   It is easiest to do this by editing the .csproj file as text and change the <AssemblyOriginatorKeyFile> tag to reference our key (in SVN under tools/key/npkeypair.snk)

5) You should now be able to build dotNetRdf

6) Next step is to apply any patches that we have already created for the build.

------------------------------------------------------------

Patching the build

There may be some patch files already in our SVN under src/dotnetrdf/patches.
Patches are specific to a particular dotNetRdf build, and the name of the patch file should start with the 
dotNetRdf revision number that is patched to make it easy to see which patches need to be applied.

To apply a patch:

<< TBD >>

------------------------------------------------------------


Creating a patch

The tricky thing here is that we could end up with multiple patches that affect the same files.
TortoiseSVN has a menu option to create a patch and it makes sense to use that.

The hard bit will be tracking which files you modify when making a patch, so it makes sense to keep things small and focussed and not to go off
making lots of separate changes as a single patch.

To create a patch:

1) Go to the lowest directory that contains all the files you have modified.

2) Use TortoiseSVN, right-click in the directory and choose "Create patch..."

3) Save the patch into brightstar/trunk/dotnetrdf/patches with a name constructed as the dotNetRdf revision number, the current date in YYYYMMDD format,
   then the path to the directory
   where the patch is applied from dotNetRdf/Trunk (with / replaced by _ )
      e.g I have patched some build issues in the mobile build that were all in the directories under dotNetRdf/Trunk/Query/Expressions/Functions.
          The dotNetRdf revision is 2029, so the file name is 
          2029_20120125_libraries_core_query_expressions_functions.patch
   This convention makes it easy to see which patches you need to apply, what order you apply them in (date order) and where each patch is applied. 
   Hopefully this will make it possible to manage multiple patches for a dotNetRdf build easily without having to put all the patches into one
   massive patch file - which will hopefully make it easier to then take each separate patch and check if it needs to be applied to a future
   dotNetRdf build.

4) Make an entry in the patchlog.txt file under brightstar/trunk/dotnetrdf/patches that lists the name of the patch file and as precisely as possible
   what you patched and why. This is so that when we move up to a new revision of dotnetrdf it will be easier to check if a patch is still required and
   if it is not possible to automatically apply the patch, the log should contain enough information to make it possible to manually update the code.
   
--------------------------------------------------------------

Debugging dotNetRdf issues

The easiest way to do this is to open up the B* solution, add the dotNetRdf.csproj to it and update the references 
in the relevant B* projects to point to the dotNetRdf project rather than the dll in the lib directory. However, 
DO NOT check this configuration in to SVN because it will fuck the build and if you fuck it, you get to unfuck it :)

--------------------------------------------------------------

Mobile build

This is currently a PITA with dotNetRdf. 

1) You need to follow the instructions in dotNetRdf/Trunk/2010 Solution ReadMe.txt to generate the solution and project files. 
   This will require that you have NAnt installed on your machine.

2) We only want to build the WP7 version of the library, so delete the other projects and just leave dotNetRdfWindowsPhone.2010

