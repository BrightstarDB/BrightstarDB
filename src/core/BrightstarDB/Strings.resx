<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidDataObjectIdentity" xml:space="preserve">
    <value>Identity is not a valid URI nor CURIE with regards to the current namespace mappings.</value>
  </data>
  <data name="InvalidEntityType" xml:space="preserve">
    <value>The value provided must be an instance of the type {0} or of a type derived from it.</value>
    <comment>Detail message for ArgumentExceptions in some Brightstar Entity Framework methods</comment>
  </data>
  <data name="BrightstarServiceClient_QueryMustNotBeNull" xml:space="preserve">
    <value>Query expression must not be NULL.</value>
  </data>
  <data name="BrightstarServiceClient_QueryMustNotBeEmptyString" xml:space="preserve">
    <value>Query expression must not be an empty string.</value>
  </data>
  <data name="BrightstarServiceClient_StoreNameMustNotBeNull" xml:space="preserve">
    <value>Store name must not be NULL.</value>
  </data>
  <data name="BrightstarServiceClient_StoreNameMustNotBeEmptyString" xml:space="preserve">
    <value>Store name must not be an empty string.</value>
  </data>
  <data name="BrightstarServiceClient_JobIdMustNotBeNull" xml:space="preserve">
    <value>Job Id must not be NULL.</value>
  </data>
  <data name="BrightstarServiceClient_JobIdMustNotBeEmptyString" xml:space="preserve">
    <value>Job Id must not be an empty string.</value>
  </data>
  <data name="BrightstarServiceClient_ImportFileNameMustNotBeNull" xml:space="preserve">
    <value>Import file name must not be NULL.</value>
  </data>
  <data name="BrightstarServiceClient_ImportFileNameMustNotBeEmptyString" xml:space="preserve">
    <value>Import file name must not be an empty string.</value>
  </data>
  <data name="BrightstarServiceClient_GetCommitPoints_TakeToLarge" xml:space="preserve">
    <value>Requested number of commit points exceeds maximum value of 100.</value>
  </data>
  <data name="BrightstarServiceClient_SkipMustNotBeNegative" xml:space="preserve">
    <value>Skip value must be a non-negative integer.</value>
  </data>
  <data name="BrightstarServiceClient_CommitPointMustNotBeNull" xml:space="preserve">
    <value>Commit point must not be NULL.</value>
  </data>
  <data name="BrightstarServiceClient_InvalidCommitPointInfoObject" xml:space="preserve">
    <value>Invalid commit point info object</value>
  </data>
  <data name="BrightstarServiceClient_InvalidTransactionInfoObject" xml:space="preserve">
    <value>Invalid transaction info object</value>
  </data>
  <data name="BrightstarServiceClient_ExportFileNameMustNotBeEmptyString" xml:space="preserve">
    <value>Export file name must not be an empty string.</value>
  </data>
  <data name="BrightstarServiceClient_ExportFileNameMustNotBeNull" xml:space="preserve">
    <value>Export file name must not be NULL.</value>
  </data>
  <data name="BrightstarServiceClient_InvalidStoreName" xml:space="preserve">
    <value>Invalid store name. Store name may only include letters, digits or the following punctuation characters: -_.+,()</value>
    <comment>Detailed message for ArgumentException thrown by CreateStore in the BrightstarServiceClient and EmbeddedBrightstarService classes.</comment>
  </data>
  <data name="BrightstarServiceClient_NoConnectionStringConfiguration" xml:space="preserve">
    <value>Could not find the connection string configuration information. Please check that the application configuration file contains the required appSettings elements.</value>
  </data>
  <data name="BrightstarServiceClient_QueryDefaultGraphUriMustNotBeNull" xml:space="preserve">
    <value>Default graph URI must not be NULL.</value>
  </data>
  <data name="INode_Attempt_to_write_to_a_fixed_page" xml:space="preserve">
    <value>Attempt to write to a fixed page.</value>
    <comment>Default string for the InvalidOperationException raised by an INode when an attempt is made to write to a backing page that is not marked as writeable.</comment>
  </data>
  <data name="BrightstarServiceClient_GetStatistics_TakeTooLarge" xml:space="preserve">
    <value>Requested number of statistics records exceeds the maximum value of 100.</value>
  </data>
  <data name="BrightstarServiceClient_StoreNameConflict" xml:space="preserve">
    <value>Store name conflicts with the name of an existing store.</value>
  </data>
  <data name="StringParameterMustBeNonEmpty" xml:space="preserve">
    <value>Parameter must be a non-empty, non-null string.</value>
  </data>
  <data name="NotAnHttpRequest" xml:space="preserve">
    <value>Request does not use HTTP(S)</value>
  </data>
  <data name="BrightstarServiceClient_TakeMustBeGreaterThanZero" xml:space="preserve">
    <value>Requestd page size must be greater than zero.</value>
  </data>
  <data name="BrightstarServiceClient_UnexpectedResponseContent" xml:space="preserve">
    <value>The server provided unexpected content in response to the service request.</value>
  </data>
  <data name="BrightstarServiceClient_GetJobInfo_TakeToLarge" xml:space="preserve">
    <value>The requested number of job records exceeds the maximum of 100.</value>
  </data>
  <data name="BrightstarServiceClient_GetTransactions_TakeTooLarge" xml:space="preserve">
    <value>The requested number of transaction records exceeds the maximum of 100.</value>
  </data>
  <data name="BrightstarServiceClient_InvalidDateRange" xml:space="preserve">
    <value>Invalid date range. Ensure that the latest date is later than or the same as the earliest date.</value>
  </data>
  <data name="BrightstarServiceClient_UpdateExpressionMustNotBeEmptyString" xml:space="preserve">
    <value>The SPARQL Update expression must not be null or an empty string.</value>
  </data>
</root>