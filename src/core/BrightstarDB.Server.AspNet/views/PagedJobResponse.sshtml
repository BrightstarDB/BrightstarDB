@Master['Layout.sshtml']

@Section['Head']
	<script src="@Path['~/assets/jquery-1.10.2.min.js']" type="text/javascript"></script>
@EndSection

@Section['Content']
<nav>
    <ul class="horizontal breadcrumb">
        <li><a href="@Path['~/']">Home</a></li>
        <li><a href="@Path['~/@Model.RequestProperties.StoreName']">Store: @Model.RequestProperties.StoreName</a></li>
        <li><a href="@Path['~/@Model.RequestProperties.StoreName/jobs']">Jobs</a></li>
    </ul>
</nav>


<section style="float:right;width:33%">
    <form method="POST" id="newJobForm">
        <fieldset>
            <legend>Start New Job</legend>
            <div>
                <label class="form-label" for="jobType">Job Type</label>
                <select id="jobType" name="JobType">
                    <option value=""> -- Select Job Type -- </option>
                    <option value="Consolidate">Consolidate Store</option>
                    <option value="Export">Export RDF</option>
                    <option value="Import">Import RDF</option>
                    <option value="Transaction">Update Transaction</option>
                    <option value="SparqlUpdate">SPARQL Update</option>
                    <option value="UpdateStats">Update Statistics</option>
                    <option value="CreateSnapshot">Create Store Snapshot</option>
                </select>
            </div>
            <div id="jobParameters">
                <div class="Consolidate Export Import Transaction SparqlUpdate UpdateStats CreateSnapshot">
                    <label class="form-label" for="label">Job Label:</label>
                    <input class="form-field long" type="text" id="label" name="label"/>
                    <span id="labelValidation" class="validation"></span>
                </div>
                <div class="Import Export required">
                    <label class="form-label"for="fileName">File Name:</label>
                    <input class="form-field long" type="text" id="fileName" name="fileName" />
                    <span id="fileNameValidation" class="validation"></span>
                </div>
                <div class="Export">
                    <label class="form-label"for="graphUri">Graph URI:</label>
                    <input class="form-field long" type="text" id="graphUri" name="graphUri"/>
                    <span id="graphUriValidation" class="validation"></span>
                </div>
                <div class="Import Transaction">
                    <label class="form-label"for="defaultGraphUri">Default Graph URI</label>
                    <input class="form-field long" type="text" id="defaultGraphUri" name="defaultGraphUri"/>
                    <span id="defaultGraphUriValidation" class="validation"></span>
                </div>
                <div class="Transaction">
                    <label class="form-label-above"for="preconditions">Pre-conditions</label>
                    <textarea class="form-field" id="preconditions" name="preconditions" rows="5" cols="50"></textarea>
                </div>
                <div class="Transaction">
                    <label class="form-label-above"for="deletes">Deletes</label>
                    <textarea class="form-field" id="deletes" name="deletes" rows="5" cols="50"></textarea>
                </div>
                <div class="Transaction">
                    <label class="form-label-above"for="inserts">Inserts</label>
                    <textarea class="form-field" id="inserts" name="inserts" rows="5" cols="50"></textarea>
                </div>
                <div class="SparqlUpdate required">
                    <label class="form-label-above" for="expression">SPARQL Update Expression</label>
                    <textarea class="form-field" id="expression" name="UpdateExpression" rows="5" cols="50"></textarea>
                    <span id="expressionValidation" class="validation"></span>
                </div>
                <div class="CreateSnapshot required">
                    <label class="form-label"for="targetStoreName">Target Store Name</label>
                    <input class="form-field long" id="targetStoreName" name="targetStoreName"/>
                    <span id="targetStoreNameValidation" class="validation"></span>
                </div>
                <div class="CreateSnapshot required">
                    <label class="form-label"for="persistenceType">Target Store Persistence</label>
                    <select class="form-field" id="persistenceType" name="PersistenceType">
                        <option value="AppendOnly">Append Only (recommended)</option>
                        <option value="Rewrite">Rewrite</option>
                    </select>
                    <span id="persistenceTypeValidation" class="validation"></span>
                </div>
            </div>

            <button type="submit" id="createJobButton">Create Job</button>
        </fieldset>
    </form>
</section>

<section>
    <table id="jobsTable" style="width:63%">
        <thead>
            <tr>
                <th>Job Label</th>
                <th>Job ID</th>
                <th>Status</th>
                <th>Queued</th>
                <th>Started</th>
                <th>Completed</th>
                <th>Status Message</th>
            </tr>
        </thead>
        <tbody>
			@Each.Items
                <tr>
                    <td><a href="@Path['~/@Model.RequestProperties.StoreName/jobs/@Current.JobId']">@Current.Label</a></td>
                    <td><a href="@Path['~/@Model.RequestProperties.StoreName/jobs/@Current.JobId']">@Current.JobId</a></td>
                    <td>@Current.JobStatus</td>
                    <td class="time">@Current.QueuedTime</td>
                    <td class="time">@Current.StartTime</td>
                    <td class="time">@Current.EndTime</td>
                    <td>@Current.StatusMessage</td>
                </tr>
            @EndEach
        </tbody>
    </table>

    @Partial['ListPagingPartial.sshtml']
</section>

<script type="text/javascript">
    // Initial state
    $('#jobParameters div').hide();
    $('#createJobButton').attr('disabled', 'disabled');
    
    function displayJobParameters() {
        var jobType = $('#jobType option:selected').val();
        if (!jobType) {
            $('#createJobButton').attr('disabled', 'disabled');
        } else {
            $('#createJobButton').removeAttr('disabled');
        }

        $('#jobParameters div').hide({
            complete: function () {
				if (jobType && jobType != '') {
					$('#jobParameters div.' + jobType).show();
				}
            }
        });
    }

    function localizeTimes() {
        $('.time').each(function (ix) {
            var str = $(this).text();
            var time = new Date(str);
            $(this).text(time.toLocaleDateString() + " " + time.toLocaleTimeString());
        });
    }
    
    $('#jobType').change(displayJobParameters);
    $(document).ready(function () {
        localizeTimes(); displayJobParameters(); });
    
    function validateNotNull(inputId, paramName, obj) {
        var val = $('#' + inputId).val();
        if (val) {
            obj[paramName] = val;
            return true;
        } else {
            $('#' + inputId + 'Validation').text('Value is required');
            return false;
        }
    }

	function getInputValue(inputId, paramName, obj) {
        var val = $('#' + inputId).val();
        if (val) {
            obj[paramName] = val;
        }
		return val;
	}

    function validateJobParameters() {
        
        var params = {};
        var isValid = true;
        $('.validation').text('');
        switch ($('#jobType').val()) {
        case 'Consolidate':
            break;
        case 'Import':
            isValid = validateNotNull('fileName', 'FileName', params);
			getInputValue('defaultGraphUri', 'DefaultGraphUri', params);
            break;
        case 'Export':
            isValid = validateNotNull('fileName', 'FileName', params);
			getInputValue('graphUri', 'GraphUri', params);
            break;
        case 'Transaction':
            params.Preconditions = $('#preconditions').val();
            params.Deletes = $('#deletes').val();
            params.Inserts = $('#inserts').val();
            params.DefaultGraphUri = $('#defaultGraphUri').val();
            break;
        case 'SparqlUpdate':
            isValid = validateNotNull('expression', 'UpdateExpression', params);
            break;
        case 'UpdateStats':
            break;
        case 'CreateSnapshot':
            isValid = validateNotNull('targetStoreName', 'TargetStoreName', params);
            isValid = validateNotNull('persistenceType', 'PersistenceType', params) && isValid;
            break;
        }
        return isValid ? params : null;
    }
    
    $('#createJobButton').click(function (event) {
        event.preventDefault();
        var jobParameters = validateJobParameters();
        if (jobParameters) {
            $.ajax({
                type: "POST",
                url: "@Path['~/']@Model.RequestProperties.StoreName/jobs",
                contentType: 'application/json',
                data: JSON.stringify ({
                    StoreName: '@Model.RequestProperties.StoreName',
                    JobType: $('#jobType').val(),
                    JobParameters: jobParameters,
                    Label: $('#label').val()
                }),
                dataType: 'json'
            }).done(function(data) {
                $('<tr></tr>').prependTo($('#jobsTable tbody'))
                    .append('<td>' + data.label + '</td>')
                    .append('<td>' + data.jobId + '</td>')
                    .append('<td>' + data.jobStatus + '</td>')
                    .append('<td></td>')
                    .append('<td></td>')
                    .append('<td></td>')
                    .append('<td>Job Queued</td>');
            }).fail(function(jqXHR, textStatus) {
                alert("Request failed: " + textStatus);
                alert("Job creation failed. Please check the validity of all job arguments");
            });
        }
    });

</script>
@EndSection