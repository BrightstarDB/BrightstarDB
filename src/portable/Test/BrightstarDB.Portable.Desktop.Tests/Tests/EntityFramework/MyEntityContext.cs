 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.ComponentModel;
using BrightstarDB.Rdf;

namespace BrightstarDB.Tests.EntityFramework 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	
    	static MyEntityContext() 
    	{
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IAnimal));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IAnimal, BrightstarDB.Tests.EntityFramework.Animal>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IArticle));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IArticle, BrightstarDB.Tests.EntityFramework.Article>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IBaseEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IBaseEntity, BrightstarDB.Tests.EntityFramework.BaseEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IChildKeyEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IChildKeyEntity, BrightstarDB.Tests.EntityFramework.ChildKeyEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ICompany));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ICompany, BrightstarDB.Tests.EntityFramework.Company>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ICompositeKeyEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ICompositeKeyEntity, BrightstarDB.Tests.EntityFramework.CompositeKeyEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IConcept));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IConcept, BrightstarDB.Tests.EntityFramework.Concept>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IDBPediaPerson));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IDBPediaPerson, BrightstarDB.Tests.EntityFramework.DBPediaPerson>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IDepartment));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IDepartment, BrightstarDB.Tests.EntityFramework.Department>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IDerivedEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IDerivedEntity, BrightstarDB.Tests.EntityFramework.DerivedEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IEntity, BrightstarDB.Tests.EntityFramework.Entity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IFoafAgent));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IFoafAgent, BrightstarDB.Tests.EntityFramework.FoafAgent>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IFoafPerson));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IFoafPerson, BrightstarDB.Tests.EntityFramework.FoafPerson>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity, BrightstarDB.Tests.EntityFramework.HierarchicalKeyEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IIdentityClashTest));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IIdentityClashTest, BrightstarDB.Tests.EntityFramework.IdentityClashTest>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1, BrightstarDB.Tests.EntityFramework.IdentityClashTestLevel1>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel2));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel2, BrightstarDB.Tests.EntityFramework.IdentityClashTestLevel2>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IJobRole));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IJobRole, BrightstarDB.Tests.EntityFramework.JobRole>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ILowerKeyEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ILowerKeyEntity, BrightstarDB.Tests.EntityFramework.LowerKeyEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IMarket));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IMarket, BrightstarDB.Tests.EntityFramework.Market>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance, BrightstarDB.Tests.EntityFramework.InverseProperty.Performance>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto, BrightstarDB.Tests.EntityFramework.InverseProperty.Photo>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction, BrightstarDB.Tests.EntityFramework.InverseProperty.Production>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember, BrightstarDB.Tests.EntityFramework.InverseProperty.ProductionMember>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson, BrightstarDB.Tests.EntityFramework.InverseProperty.ProductionPerson>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IPerson));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IPerson, BrightstarDB.Tests.EntityFramework.Person>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ISession));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ISession, BrightstarDB.Tests.EntityFramework.Session>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IEveningSession));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IEveningSession, BrightstarDB.Tests.EntityFramework.EveningSession>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ITechnicalEveningSession));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ITechnicalEveningSession, BrightstarDB.Tests.EntityFramework.TechnicalEveningSession>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ISkill));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ISkill, BrightstarDB.Tests.EntityFramework.Skill>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.IStringKeyEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.IStringKeyEntity, BrightstarDB.Tests.EntityFramework.StringKeyEntity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Tests.EntityFramework.ITrackable));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Tests.EntityFramework.ITrackable, BrightstarDB.Tests.EntityFramework.Trackable>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public MyEntityContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Animals = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IAnimal>(this);
    		Articles = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IArticle>(this);
    		BaseEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IBaseEntity>(this);
    		ChildKeyEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IChildKeyEntity>(this);
    		Companies = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ICompany>(this);
    		CompositeKeyEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ICompositeKeyEntity>(this);
    		Concepts = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IConcept>(this);
    		DBPediaPersons = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IDBPediaPerson>(this);
    		Departments = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IDepartment>(this);
    		DerivedEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IDerivedEntity>(this);
    		Entities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IEntity>(this);
    		FoafAgents = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IFoafAgent>(this);
    		FoafPersons = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IFoafPerson>(this);
    		HierarchicalKeyEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity>(this);
    		IdentityClashTests = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IIdentityClashTest>(this);
    		IdentityClashTestLevel1s = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1>(this);
    		IdentityClashTestLevel2s = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel2>(this);
    		JobRoles = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IJobRole>(this);
    		LowerKeyEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ILowerKeyEntity>(this);
    		Markets = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IMarket>(this);
    		Performances = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance>(this);
    		Photos = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto>(this);
    		Productions = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>(this);
    		ProductionMembers = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember>(this);
    		ProductionPersons = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson>(this);
    		Persons = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IPerson>(this);
    		Sessions = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ISession>(this);
    		EveningSessions = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IEveningSession>(this);
    		TechnicalEveningSessions = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ITechnicalEveningSession>(this);
    		Skills = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ISkill>(this);
    		StringKeyEntities = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.IStringKeyEntity>(this);
    		Trackables = 	new BrightstarEntitySet<BrightstarDB.Tests.EntityFramework.ITrackable>(this);
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IAnimal> Animals
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IArticle> Articles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IBaseEntity> BaseEntities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IChildKeyEntity> ChildKeyEntities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.ICompany> Companies
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.ICompositeKeyEntity> CompositeKeyEntities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IConcept> Concepts
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IDBPediaPerson> DBPediaPersons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IDepartment> Departments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IDerivedEntity> DerivedEntities
    	{
    		get; private set;
    	}
    	
    	internal IEntitySet<BrightstarDB.Tests.EntityFramework.IEntity> Entities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IFoafAgent> FoafAgents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IFoafPerson> FoafPersons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity> HierarchicalKeyEntities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IIdentityClashTest> IdentityClashTests
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1> IdentityClashTestLevel1s
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel2> IdentityClashTestLevel2s
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IJobRole> JobRoles
    	{
    		get; private set;
    	}
    	
    	internal IEntitySet<BrightstarDB.Tests.EntityFramework.ILowerKeyEntity> LowerKeyEntities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IMarket> Markets
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance> Performances
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto> Photos
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction> Productions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember> ProductionMembers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson> ProductionPersons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IPerson> Persons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.ISession> Sessions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IEveningSession> EveningSessions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.ITechnicalEveningSession> TechnicalEveningSessions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.ISkill> Skills
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.IStringKeyEntity> StringKeyEntities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Tests.EntityFramework.ITrackable> Trackables
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IAnimal))) {
                return (IEntitySet<T>)this.Animals;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IArticle))) {
                return (IEntitySet<T>)this.Articles;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IBaseEntity))) {
                return (IEntitySet<T>)this.BaseEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IChildKeyEntity))) {
                return (IEntitySet<T>)this.ChildKeyEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ICompany))) {
                return (IEntitySet<T>)this.Companies;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ICompositeKeyEntity))) {
                return (IEntitySet<T>)this.CompositeKeyEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IConcept))) {
                return (IEntitySet<T>)this.Concepts;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IDBPediaPerson))) {
                return (IEntitySet<T>)this.DBPediaPersons;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IDepartment))) {
                return (IEntitySet<T>)this.Departments;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IDerivedEntity))) {
                return (IEntitySet<T>)this.DerivedEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IEntity))) {
                return (IEntitySet<T>)this.Entities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IFoafAgent))) {
                return (IEntitySet<T>)this.FoafAgents;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IFoafPerson))) {
                return (IEntitySet<T>)this.FoafPersons;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity))) {
                return (IEntitySet<T>)this.HierarchicalKeyEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IIdentityClashTest))) {
                return (IEntitySet<T>)this.IdentityClashTests;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1))) {
                return (IEntitySet<T>)this.IdentityClashTestLevel1s;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel2))) {
                return (IEntitySet<T>)this.IdentityClashTestLevel2s;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IJobRole))) {
                return (IEntitySet<T>)this.JobRoles;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ILowerKeyEntity))) {
                return (IEntitySet<T>)this.LowerKeyEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IMarket))) {
                return (IEntitySet<T>)this.Markets;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance))) {
                return (IEntitySet<T>)this.Performances;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto))) {
                return (IEntitySet<T>)this.Photos;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction))) {
                return (IEntitySet<T>)this.Productions;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember))) {
                return (IEntitySet<T>)this.ProductionMembers;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson))) {
                return (IEntitySet<T>)this.ProductionPersons;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IPerson))) {
                return (IEntitySet<T>)this.Persons;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ISession))) {
                return (IEntitySet<T>)this.Sessions;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IEveningSession))) {
                return (IEntitySet<T>)this.EveningSessions;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ITechnicalEveningSession))) {
                return (IEntitySet<T>)this.TechnicalEveningSessions;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ISkill))) {
                return (IEntitySet<T>)this.Skills;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.IStringKeyEntity))) {
                return (IEntitySet<T>)this.StringKeyEntities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Tests.EntityFramework.ITrackable))) {
                return (IEntitySet<T>)this.Trackables;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class MyEntityContext
        
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Animal : BrightstarEntityObject, IAnimal 
    {
    	public Animal(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Animal() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IAnimal
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IPerson Owner
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Owner"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Owner", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Article : BrightstarEntityObject, IArticle 
    {
    	public Article(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Article() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IArticle
    
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String BodyText
    	{
            		get { return GetRelatedProperty<System.String>("BodyText"); }
            		set { SetRelatedProperty("BodyText", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IPerson Publisher
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Publisher"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Publisher", value); }
    	}
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ITrackable
    
    	public System.DateTime Created
    	{
            		get { return GetRelatedProperty<System.DateTime>("Created"); }
            		set { SetRelatedProperty("Created", value); }
    	}
    
    	public System.DateTime LastModified
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastModified"); }
            		set { SetRelatedProperty("LastModified", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class BaseEntity : BrightstarEntityObject, IBaseEntity 
    {
    	public BaseEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public BaseEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IBaseEntity
    
    	public System.String BaseStringValue
    	{
            		get { return GetRelatedProperty<System.String>("BaseStringValue"); }
            		set { SetRelatedProperty("BaseStringValue", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class ChildKeyEntity : BrightstarEntityObject, IChildKeyEntity 
    {
    	public ChildKeyEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public ChildKeyEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IChildKeyEntity
    
    	public BrightstarDB.Tests.EntityFramework.IBaseEntity Parent
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IBaseEntity>("Parent"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IBaseEntity>("Parent", value); }
    	}
    
    	public System.Int32 Position
    	{
            		get { return GetRelatedProperty<System.Int32>("Position"); }
            		set { SetRelatedProperty("Position", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Company : BrightstarEntityObject, ICompany 
    {
    	public Company(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Company() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ICompany
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String TickerSymbol
    	{
            		get { return GetRelatedProperty<System.String>("TickerSymbol"); }
            		set { SetRelatedProperty("TickerSymbol", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IMarket ListedOn
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IMarket>("ListedOn"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IMarket>("ListedOn", value); }
    	}
    
    	public System.Decimal CurrentSharePrice
    	{
            		get { return GetRelatedProperty<System.Decimal>("CurrentSharePrice"); }
            		set { SetRelatedProperty("CurrentSharePrice", value); }
    	}
    
    	public System.Double CurrentMarketCap
    	{
            		get { return GetRelatedProperty<System.Double>("CurrentMarketCap"); }
            		set { SetRelatedProperty("CurrentMarketCap", value); }
    	}
    
    	public System.Int32 HeadCount
    	{
            		get { return GetRelatedProperty<System.Int32>("HeadCount"); }
            		set { SetRelatedProperty("HeadCount", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class CompositeKeyEntity : BrightstarEntityObject, ICompositeKeyEntity 
    {
    	public CompositeKeyEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public CompositeKeyEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ICompositeKeyEntity
    
    	public System.String First
    	{
            		get { return GetRelatedProperty<System.String>("First"); }
            		set { SetRelatedProperty("First", value); }
    	}
    
    	public System.Int32 Second
    	{
            		get { return GetRelatedProperty<System.Int32>("Second"); }
            		set { SetRelatedProperty("Second", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Concept : BrightstarEntityObject, IConcept 
    {
    	public Concept(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Concept() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IConcept
    	public System.Collections.Generic.ICollection<BrightstarDB.Rdf.PlainLiteral> PrefLabel
    	{
    		get { return GetRelatedLiteralPropertiesCollection<BrightstarDB.Rdf.PlainLiteral>("PrefLabel"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<BrightstarDB.Rdf.PlainLiteral>("PrefLabel", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class DBPediaPerson : BrightstarEntityObject, IDBPediaPerson 
    {
    	public DBPediaPerson(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public DBPediaPerson() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IDBPediaPerson
    
    	public System.DateTime BirthDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("BirthDate"); }
            		set { SetRelatedProperty("BirthDate", value); }
    	}
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String GivenName
    	{
            		get { return GetRelatedProperty<System.String>("GivenName"); }
            		set { SetRelatedProperty("GivenName", value); }
    	}
    
    	public System.String Surname
    	{
            		get { return GetRelatedProperty<System.String>("Surname"); }
            		set { SetRelatedProperty("Surname", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Department : BrightstarEntityObject, IDepartment 
    {
    	public Department(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Department() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IDepartment
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.Int32 DeptId
    	{
            		get { return GetRelatedProperty<System.Int32>("DeptId"); }
            		set { SetRelatedProperty("DeptId", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IPerson> Persons
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IPerson>("Persons"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Persons", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class DerivedEntity : BrightstarEntityObject, IDerivedEntity 
    {
    	public DerivedEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public DerivedEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IDerivedEntity
    
    	public System.DateTime DateTimeProperty
    	{
            		get { return GetRelatedProperty<System.DateTime>("DateTimeProperty"); }
            		set { SetRelatedProperty("DateTimeProperty", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IBaseEntity> RelatedEntities
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IBaseEntity>("RelatedEntities"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("RelatedEntities", value); }
    								}
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IBaseEntity
    
    	public System.String BaseStringValue
    	{
            		get { return GetRelatedProperty<System.String>("BaseStringValue"); }
            		set { SetRelatedProperty("BaseStringValue", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    internal partial class Entity : BrightstarEntityObject, IEntity 
    {
    	public Entity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Entity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IEntity
    
    	public System.String SomeString
    	{
            		get { return GetRelatedProperty<System.String>("SomeString"); }
            		set { SetRelatedProperty("SomeString", value); }
    	}
    
    	public System.DateTime SomeDateTime
    	{
            		get { return GetRelatedProperty<System.DateTime>("SomeDateTime"); }
            		set { SetRelatedProperty("SomeDateTime", value); }
    	}
    
    	public System.Nullable<System.DateTime> SomeNullableDateTime
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("SomeNullableDateTime"); }
            		set { SetRelatedProperty("SomeNullableDateTime", value); }
    	}
    
    	public System.Boolean SomeBool
    	{
            		get { return GetRelatedProperty<System.Boolean>("SomeBool"); }
            		set { SetRelatedProperty("SomeBool", value); }
    	}
    
    	public System.Nullable<System.Boolean> NullableBool
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Boolean>>("NullableBool"); }
            		set { SetRelatedProperty("NullableBool", value); }
    	}
    
    	public System.Byte SomeByte
    	{
            		get { return GetRelatedProperty<System.Byte>("SomeByte"); }
            		set { SetRelatedProperty("SomeByte", value); }
    	}
    
    	public System.Byte AnotherByte
    	{
            		get { return GetRelatedProperty<System.Byte>("AnotherByte"); }
            		set { SetRelatedProperty("AnotherByte", value); }
    	}
    
    	public System.Nullable<System.Byte> NullableByte
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Byte>>("NullableByte"); }
            		set { SetRelatedProperty("NullableByte", value); }
    	}
    
    	public System.Nullable<System.Byte> AnotherNullableByte
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Byte>>("AnotherNullableByte"); }
            		set { SetRelatedProperty("AnotherNullableByte", value); }
    	}
    
    	public System.Char SomeChar
    	{
            		get { return GetRelatedProperty<System.Char>("SomeChar"); }
            		set { SetRelatedProperty("SomeChar", value); }
    	}
    
    	public System.Char AnotherChar
    	{
            		get { return GetRelatedProperty<System.Char>("AnotherChar"); }
            		set { SetRelatedProperty("AnotherChar", value); }
    	}
    
    	public System.Nullable<System.Char> NullableChar
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Char>>("NullableChar"); }
            		set { SetRelatedProperty("NullableChar", value); }
    	}
    
    	public System.Nullable<System.Char> AnotherNullableChar
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Char>>("AnotherNullableChar"); }
            		set { SetRelatedProperty("AnotherNullableChar", value); }
    	}
    
    	public System.Decimal SomeDecimal
    	{
            		get { return GetRelatedProperty<System.Decimal>("SomeDecimal"); }
            		set { SetRelatedProperty("SomeDecimal", value); }
    	}
    
    	public System.Double SomeDouble
    	{
            		get { return GetRelatedProperty<System.Double>("SomeDouble"); }
            		set { SetRelatedProperty("SomeDouble", value); }
    	}
    
    	public System.Single SomeFloat
    	{
            		get { return GetRelatedProperty<System.Single>("SomeFloat"); }
            		set { SetRelatedProperty("SomeFloat", value); }
    	}
    
    	public System.Int32 SomeInt
    	{
            		get { return GetRelatedProperty<System.Int32>("SomeInt"); }
            		set { SetRelatedProperty("SomeInt", value); }
    	}
    
    	public System.Nullable<System.Int32> SomeNullableInt
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Int32>>("SomeNullableInt"); }
            		set { SetRelatedProperty("SomeNullableInt", value); }
    	}
    
    	public System.Int64 SomeLong
    	{
            		get { return GetRelatedProperty<System.Int64>("SomeLong"); }
            		set { SetRelatedProperty("SomeLong", value); }
    	}
    
    	public System.SByte SomeSByte
    	{
            		get { return GetRelatedProperty<System.SByte>("SomeSByte"); }
            		set { SetRelatedProperty("SomeSByte", value); }
    	}
    
    	public System.SByte AnotherSByte
    	{
            		get { return GetRelatedProperty<System.SByte>("AnotherSByte"); }
            		set { SetRelatedProperty("AnotherSByte", value); }
    	}
    
    	public System.Int16 SomeShort
    	{
            		get { return GetRelatedProperty<System.Int16>("SomeShort"); }
            		set { SetRelatedProperty("SomeShort", value); }
    	}
    
    	public System.Int16 AnotherShort
    	{
            		get { return GetRelatedProperty<System.Int16>("AnotherShort"); }
            		set { SetRelatedProperty("AnotherShort", value); }
    	}
    
    	public System.UInt32 SomeUInt
    	{
            		get { return GetRelatedProperty<System.UInt32>("SomeUInt"); }
            		set { SetRelatedProperty("SomeUInt", value); }
    	}
    
    	public System.UInt32 AnotherUInt
    	{
            		get { return GetRelatedProperty<System.UInt32>("AnotherUInt"); }
            		set { SetRelatedProperty("AnotherUInt", value); }
    	}
    
    	public System.UInt64 SomeULong
    	{
            		get { return GetRelatedProperty<System.UInt64>("SomeULong"); }
            		set { SetRelatedProperty("SomeULong", value); }
    	}
    
    	public System.UInt64 AnotherULong
    	{
            		get { return GetRelatedProperty<System.UInt64>("AnotherULong"); }
            		set { SetRelatedProperty("AnotherULong", value); }
    	}
    
    	public System.UInt16 SomeUShort
    	{
            		get { return GetRelatedProperty<System.UInt16>("SomeUShort"); }
            		set { SetRelatedProperty("SomeUShort", value); }
    	}
    
    	public System.UInt16 AnotherUShort
    	{
            		get { return GetRelatedProperty<System.UInt16>("AnotherUShort"); }
            		set { SetRelatedProperty("AnotherUShort", value); }
    	}
    
    	public System.Byte[] SomeByteArray
    	{
            		get { return GetRelatedProperty<System.Byte[]>("SomeByteArray"); }
            		set { SetRelatedProperty("SomeByteArray", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.TestEnumeration SomeEnumeration
    	{
            		get { return GetRelatedProperty<BrightstarDB.Tests.EntityFramework.TestEnumeration>("SomeEnumeration"); }
            		set { SetRelatedProperty("SomeEnumeration", value); }
    	}
    
    	public System.Nullable<BrightstarDB.Tests.EntityFramework.TestEnumeration> SomeNullableEnumeration
    	{
            		get { return GetRelatedProperty<System.Nullable<BrightstarDB.Tests.EntityFramework.TestEnumeration>>("SomeNullableEnumeration"); }
            		set { SetRelatedProperty("SomeNullableEnumeration", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.TestFlagsEnumeration SomeFlagsEnumeration
    	{
            		get { return GetRelatedProperty<BrightstarDB.Tests.EntityFramework.TestFlagsEnumeration>("SomeFlagsEnumeration"); }
            		set { SetRelatedProperty("SomeFlagsEnumeration", value); }
    	}
    
    	public System.Nullable<BrightstarDB.Tests.EntityFramework.TestFlagsEnumeration> SomeNullableFlagsEnumeration
    	{
            		get { return GetRelatedProperty<System.Nullable<BrightstarDB.Tests.EntityFramework.TestFlagsEnumeration>>("SomeNullableFlagsEnumeration"); }
            		set { SetRelatedProperty("SomeNullableFlagsEnumeration", value); }
    	}
    	public System.Collections.Generic.ICollection<System.String> CollectionOfStrings
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("CollectionOfStrings"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("CollectionOfStrings", value); }
    	}
    	public System.Collections.Generic.ICollection<System.DateTime> CollectionOfDateTimes
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.DateTime>("CollectionOfDateTimes"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.DateTime>("CollectionOfDateTimes", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Boolean> CollectionOfBools
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Boolean>("CollectionOfBools"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Boolean>("CollectionOfBools", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Decimal> CollectionOfDecimals
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Decimal>("CollectionOfDecimals"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Decimal>("CollectionOfDecimals", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Double> CollectionOfDoubles
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Double>("CollectionOfDoubles"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Double>("CollectionOfDoubles", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Single> CollectionOfFloats
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Single>("CollectionOfFloats"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Single>("CollectionOfFloats", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Int32> CollectionOfInts
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Int32>("CollectionOfInts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Int32>("CollectionOfInts", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Int64> CollectionOfLong
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Int64>("CollectionOfLong"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Int64>("CollectionOfLong", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class FoafAgent : BrightstarEntityObject, IFoafAgent 
    {
    	public FoafAgent(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public FoafAgent() : base() { }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IFoafAgent
    	public System.Collections.Generic.ICollection<System.String> MboxSums
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("MboxSums"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("MboxSums", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    [DisplayName("Person")]
    public partial class FoafPerson : BrightstarEntityObject, IFoafPerson 
    {
    	public FoafPerson(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public FoafPerson() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IFoafPerson
    	
    	[System.ComponentModel.DisplayNameAttribute("Also Known As")]
    	public System.String Nickname
    	{
            		get { return GetRelatedProperty<System.String>("Nickname"); }
            		set { SetRelatedProperty("Nickname", value); }
    	}
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String Organisation
    	{
            		get { return GetRelatedProperty<System.String>("Organisation"); }
            		set { SetRelatedProperty("Organisation", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IFoafPerson> Knows
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IFoafPerson>("Knows"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Knows", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IFoafPerson> KnownBy
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IFoafPerson>("KnownBy"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("KnownBy", value); }
    								}
    
    	public System.Nullable<System.DateTime> BirthDate
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("BirthDate"); }
            		set { SetRelatedProperty("BirthDate", value); }
    	}
    
    	public System.Uri Homepage
    	{
            		get { return GetRelatedProperty<System.Uri>("Homepage"); }
            		set { SetRelatedProperty("Homepage", value); }
    	}
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IFoafAgent
    	public System.Collections.Generic.ICollection<System.String> MboxSums
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("MboxSums"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("MboxSums", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class HierarchicalKeyEntity : BrightstarEntityObject, IHierarchicalKeyEntity 
    {
    	public HierarchicalKeyEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public HierarchicalKeyEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity
    
    	public BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity Parent
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity>("Parent"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IHierarchicalKeyEntity>("Parent", value); }
    	}
    
    	public System.String Code
    	{
            		get { return GetRelatedProperty<System.String>("Code"); }
            		set { SetRelatedProperty("Code", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class IdentityClashTest : BrightstarEntityObject, IIdentityClashTest 
    {
    	public IdentityClashTest(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public IdentityClashTest() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IIdentityClashTest
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class IdentityClashTestLevel1 : BrightstarEntityObject, IIdentityClashTestLevel1 
    {
    	public IdentityClashTestLevel1(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public IdentityClashTestLevel1() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IIdentityClashTest
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class IdentityClashTestLevel2 : BrightstarEntityObject, IIdentityClashTestLevel2 
    {
    	public IdentityClashTestLevel2(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public IdentityClashTestLevel2() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel2
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IIdentityClashTestLevel1
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IIdentityClashTest
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class JobRole : BrightstarEntityObject, IJobRole 
    {
    	public JobRole(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public JobRole() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IJobRole
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IPerson> Persons
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IPerson>("Persons"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Persons", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    internal partial class LowerKeyEntity : BrightstarEntityObject, ILowerKeyEntity 
    {
    	public LowerKeyEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public LowerKeyEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ILowerKeyEntity
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Market : BrightstarEntityObject, IMarket 
    {
    	public Market(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Market() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IMarket
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.ICompany> ListedCompanies
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.ICompany>("ListedCompanies"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ListedCompanies", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework.InverseProperty 
{
    
    public partial class Performance : BrightstarEntityObject, IPerformance 
    {
    	public Performance(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Performance() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance
    
    	public BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction Production
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>("Production"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>("Production", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework.InverseProperty 
{
    
    public partial class Photo : BrightstarEntityObject, IPhoto 
    {
    	public Photo(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Photo() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto
    
    	public BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction Production
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>("Production"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>("Production", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework.InverseProperty 
{
    
    public partial class Production : BrightstarEntityObject, IProduction 
    {
    	public Production(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Production() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction
    
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance> Performances
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.InverseProperty.IPerformance>("Performances"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Performances", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember> ProductionTeam
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember>("ProductionTeam"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ProductionTeam", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto> Photos
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.InverseProperty.IPhoto>("Photos"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Photos", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework.InverseProperty 
{
    
    public partial class ProductionMember : BrightstarEntityObject, IProductionMember 
    {
    	public ProductionMember(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public ProductionMember() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionMember
    
    	public BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson Person
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson>("Person"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson>("Person", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction Production
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>("Production"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.InverseProperty.IProduction>("Production", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework.InverseProperty 
{
    
    public partial class ProductionPerson : BrightstarEntityObject, IProductionPerson 
    {
    	public ProductionPerson(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public ProductionPerson() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.InverseProperty.IProductionPerson
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Person : BrightstarEntityObject, IPerson 
    {
    	public Person(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Person() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IPerson
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.Nullable<System.DateTime> DateOfBirth
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("DateOfBirth"); }
            		set { SetRelatedProperty("DateOfBirth", value); }
    	}
    
    	public System.Int32 Age
    	{
            		get { return GetRelatedProperty<System.Int32>("Age"); }
            		set { SetRelatedProperty("Age", value); }
    	}
    
    	public System.Int32 Salary
    	{
            		get { return GetRelatedProperty<System.Int32>("Salary"); }
            		set { SetRelatedProperty("Salary", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IPerson Mother
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Mother"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Mother", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IPerson Father
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Father"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Father", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IPerson> Friends
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IPerson>("Friends"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Friends", value); }
    								}
    
    	public BrightstarDB.Tests.EntityFramework.IAnimal Pet
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IAnimal>("Pet"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IAnimal>("Pet", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.ISkill MainSkill
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.ISkill>("MainSkill"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.ISkill>("MainSkill", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.ISkill> Skills
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.ISkill>("Skills"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Skills", value); }
    								}
    
    	public BrightstarDB.Tests.EntityFramework.IDepartment Department
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IDepartment>("Department"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IDepartment>("Department", value); }
    	}
    
    	public System.Int32 EmployeeId
    	{
            		get { return GetRelatedProperty<System.Int32>("EmployeeId"); }
            		set { SetRelatedProperty("EmployeeId", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IJobRole JobRole
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IJobRole>("JobRole"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IJobRole>("JobRole", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Uri> Websites
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Uri>("Websites"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Uri>("Websites", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Session : BrightstarEntityObject, ISession 
    {
    	public Session(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Session() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ISession
    
    	public System.String Speaker
    	{
            		get { return GetRelatedProperty<System.String>("Speaker"); }
            		set { SetRelatedProperty("Speaker", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class EveningSession : BrightstarEntityObject, IEveningSession 
    {
    	public EveningSession(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public EveningSession() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IEveningSession
    
    	public System.String DateTime
    	{
            		get { return GetRelatedProperty<System.String>("DateTime"); }
            		set { SetRelatedProperty("DateTime", value); }
    	}
    
    	public System.Boolean FreeBeer
    	{
            		get { return GetRelatedProperty<System.Boolean>("FreeBeer"); }
            		set { SetRelatedProperty("FreeBeer", value); }
    	}
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ISession
    
    	public System.String Speaker
    	{
            		get { return GetRelatedProperty<System.String>("Speaker"); }
            		set { SetRelatedProperty("Speaker", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class TechnicalEveningSession : BrightstarEntityObject, ITechnicalEveningSession 
    {
    	public TechnicalEveningSession(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public TechnicalEveningSession() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ITechnicalEveningSession
    
    	public System.String Subject
    	{
            		get { return GetRelatedProperty<System.String>("Subject"); }
            		set { SetRelatedProperty("Subject", value); }
    	}
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IEveningSession
    
    	public System.String DateTime
    	{
            		get { return GetRelatedProperty<System.String>("DateTime"); }
            		set { SetRelatedProperty("DateTime", value); }
    	}
    
    	public System.Boolean FreeBeer
    	{
            		get { return GetRelatedProperty<System.Boolean>("FreeBeer"); }
            		set { SetRelatedProperty("FreeBeer", value); }
    	}
    	#endregion
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ISession
    
    	public System.String Speaker
    	{
            		get { return GetRelatedProperty<System.String>("Speaker"); }
            		set { SetRelatedProperty("Speaker", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Skill : BrightstarEntityObject, ISkill 
    {
    	public Skill(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Skill() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ISkill
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.IPerson Expert
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Expert"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.IPerson>("Expert", value); }
    	}
    
    	public BrightstarDB.Tests.EntityFramework.ISkill Parent
    	{
            get { return GetRelatedObject<BrightstarDB.Tests.EntityFramework.ISkill>("Parent"); }
            set { SetRelatedObject<BrightstarDB.Tests.EntityFramework.ISkill>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.ISkill> Children
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.ISkill>("Children"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Children", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Tests.EntityFramework.IPerson> SkilledPeople
    	{
    		get { return GetRelatedObjects<BrightstarDB.Tests.EntityFramework.IPerson>("SkilledPeople"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SkilledPeople", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class StringKeyEntity : BrightstarEntityObject, IStringKeyEntity 
    {
    	public StringKeyEntity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public StringKeyEntity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.IStringKeyEntity
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Tests.EntityFramework 
{
    
    public partial class Trackable : BrightstarEntityObject, ITrackable 
    {
    	public Trackable(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Trackable() : base() { }
    	#region Implementation of BrightstarDB.Tests.EntityFramework.ITrackable
    
    	public System.DateTime Created
    	{
            		get { return GetRelatedProperty<System.DateTime>("Created"); }
            		set { SetRelatedProperty("Created", value); }
    	}
    
    	public System.DateTime LastModified
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastModified"); }
            		set { SetRelatedProperty("LastModified", value); }
    	}
    	#endregion
    }
}
