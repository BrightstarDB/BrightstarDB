 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.ComponentModel;

namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	
    	static MyEntityContext() 
    	{
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.Animal>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.Department>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IEntity));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IEntity, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.Entity>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.FoafAgent>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.FoafPerson>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.JobRole>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.Person>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill));
    		EntityMappingStore.Instance.SetImplMapping<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill, BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.Skill>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public MyEntityContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Animals = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal>(this);
    		Departments = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment>(this);
    		Entities = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IEntity>(this);
    		FoafAgents = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent>(this);
    		FoafPersons = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson>(this);
    		JobRoles = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole>(this);
    		Persons = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>(this);
    		Skills = 	new BrightstarEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>(this);
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal> Animals
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment> Departments
    	{
    		get; private set;
    	}
    	
    	internal IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IEntity> Entities
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent> FoafAgents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson> FoafPersons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole> JobRoles
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson> Persons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill> Skills
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal))) {
                return (IEntitySet<T>)this.Animals;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment))) {
                return (IEntitySet<T>)this.Departments;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IEntity))) {
                return (IEntitySet<T>)this.Entities;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent))) {
                return (IEntitySet<T>)this.FoafAgents;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson))) {
                return (IEntitySet<T>)this.FoafPersons;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole))) {
                return (IEntitySet<T>)this.JobRoles;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson))) {
                return (IEntitySet<T>)this.Persons;
            }
            if (typeof(T).Equals(typeof(BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill))) {
                return (IEntitySet<T>)this.Skills;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class MyEntityContext
        
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    public partial class Animal : BrightstarEntityObject, IAnimal 
    {
    	public Animal(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Animal(BrightstarEntityContext context) : base(context, typeof(Animal)) { }
    	public Animal() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson Owner
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Owner"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Owner", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    public partial class Department : BrightstarEntityObject, IDepartment 
    {
    	public Department(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Department(BrightstarEntityContext context) : base(context, typeof(Department)) { }
    	public Department() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.Int32 DeptId
    	{
            		get { return GetRelatedProperty<System.Int32>("DeptId"); }
            		set { SetRelatedProperty("DeptId", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson> Persons
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Persons"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Persons", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    internal partial class Entity : BrightstarEntityObject, IEntity 
    {
    	public Entity(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Entity(BrightstarEntityContext context) : base(context, typeof(Entity)) { }
    	public Entity() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IEntity
    
    	public System.String SomeString
    	{
            		get { return GetRelatedProperty<System.String>("SomeString"); }
            		set { SetRelatedProperty("SomeString", value); }
    	}
    
    	public System.DateTime SomeDateTime
    	{
            		get { return GetRelatedProperty<System.DateTime>("SomeDateTime"); }
            		set { SetRelatedProperty("SomeDateTime", value); }
    	}
    
    	public System.Nullable<System.DateTime> SomeNullableDateTime
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("SomeNullableDateTime"); }
            		set { SetRelatedProperty("SomeNullableDateTime", value); }
    	}
    
    	public System.Boolean SomeBool
    	{
            		get { return GetRelatedProperty<System.Boolean>("SomeBool"); }
            		set { SetRelatedProperty("SomeBool", value); }
    	}
    
    	public System.Nullable<System.Boolean> NullableBool
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Boolean>>("NullableBool"); }
            		set { SetRelatedProperty("NullableBool", value); }
    	}
    
    	public System.Byte SomeByte
    	{
            		get { return GetRelatedProperty<System.Byte>("SomeByte"); }
            		set { SetRelatedProperty("SomeByte", value); }
    	}
    
    	public System.Byte AnotherByte
    	{
            		get { return GetRelatedProperty<System.Byte>("AnotherByte"); }
            		set { SetRelatedProperty("AnotherByte", value); }
    	}
    
    	public System.Nullable<System.Byte> NullableByte
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Byte>>("NullableByte"); }
            		set { SetRelatedProperty("NullableByte", value); }
    	}
    
    	public System.Nullable<System.Byte> AnotherNullableByte
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Byte>>("AnotherNullableByte"); }
            		set { SetRelatedProperty("AnotherNullableByte", value); }
    	}
    
    	public System.Char SomeChar
    	{
            		get { return GetRelatedProperty<System.Char>("SomeChar"); }
            		set { SetRelatedProperty("SomeChar", value); }
    	}
    
    	public System.Char AnotherChar
    	{
            		get { return GetRelatedProperty<System.Char>("AnotherChar"); }
            		set { SetRelatedProperty("AnotherChar", value); }
    	}
    
    	public System.Nullable<System.Char> NullableChar
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Char>>("NullableChar"); }
            		set { SetRelatedProperty("NullableChar", value); }
    	}
    
    	public System.Nullable<System.Char> AnotherNullableChar
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Char>>("AnotherNullableChar"); }
            		set { SetRelatedProperty("AnotherNullableChar", value); }
    	}
    
    	public System.Decimal SomeDecimal
    	{
            		get { return GetRelatedProperty<System.Decimal>("SomeDecimal"); }
            		set { SetRelatedProperty("SomeDecimal", value); }
    	}
    
    	public System.Double SomeDouble
    	{
            		get { return GetRelatedProperty<System.Double>("SomeDouble"); }
            		set { SetRelatedProperty("SomeDouble", value); }
    	}
    
    	public System.Single SomeFloat
    	{
            		get { return GetRelatedProperty<System.Single>("SomeFloat"); }
            		set { SetRelatedProperty("SomeFloat", value); }
    	}
    
    	public System.Int32 SomeInt
    	{
            		get { return GetRelatedProperty<System.Int32>("SomeInt"); }
            		set { SetRelatedProperty("SomeInt", value); }
    	}
    
    	public System.Nullable<System.Int32> SomeNullableInt
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Int32>>("SomeNullableInt"); }
            		set { SetRelatedProperty("SomeNullableInt", value); }
    	}
    
    	public System.Int64 SomeLong
    	{
            		get { return GetRelatedProperty<System.Int64>("SomeLong"); }
            		set { SetRelatedProperty("SomeLong", value); }
    	}
    
    	public System.SByte SomeSByte
    	{
            		get { return GetRelatedProperty<System.SByte>("SomeSByte"); }
            		set { SetRelatedProperty("SomeSByte", value); }
    	}
    
    	public System.SByte AnotherSByte
    	{
            		get { return GetRelatedProperty<System.SByte>("AnotherSByte"); }
            		set { SetRelatedProperty("AnotherSByte", value); }
    	}
    
    	public System.Int16 SomeShort
    	{
            		get { return GetRelatedProperty<System.Int16>("SomeShort"); }
            		set { SetRelatedProperty("SomeShort", value); }
    	}
    
    	public System.Int16 AnotherShort
    	{
            		get { return GetRelatedProperty<System.Int16>("AnotherShort"); }
            		set { SetRelatedProperty("AnotherShort", value); }
    	}
    
    	public System.UInt32 SomeUInt
    	{
            		get { return GetRelatedProperty<System.UInt32>("SomeUInt"); }
            		set { SetRelatedProperty("SomeUInt", value); }
    	}
    
    	public System.UInt32 AnotherUInt
    	{
            		get { return GetRelatedProperty<System.UInt32>("AnotherUInt"); }
            		set { SetRelatedProperty("AnotherUInt", value); }
    	}
    
    	public System.UInt64 SomeULong
    	{
            		get { return GetRelatedProperty<System.UInt64>("SomeULong"); }
            		set { SetRelatedProperty("SomeULong", value); }
    	}
    
    	public System.UInt64 AnotherULong
    	{
            		get { return GetRelatedProperty<System.UInt64>("AnotherULong"); }
            		set { SetRelatedProperty("AnotherULong", value); }
    	}
    
    	public System.UInt16 SomeUShort
    	{
            		get { return GetRelatedProperty<System.UInt16>("SomeUShort"); }
            		set { SetRelatedProperty("SomeUShort", value); }
    	}
    
    	public System.UInt16 AnotherUShort
    	{
            		get { return GetRelatedProperty<System.UInt16>("AnotherUShort"); }
            		set { SetRelatedProperty("AnotherUShort", value); }
    	}
    
    	public System.Byte[] SomeByteArray
    	{
            		get { return GetRelatedProperty<System.Byte[]>("SomeByteArray"); }
            		set { SetRelatedProperty("SomeByteArray", value); }
    	}
    
    	public System.Guid SomeGuid
    	{
            		get { return GetRelatedProperty<System.Guid>("SomeGuid"); }
            		set { SetRelatedProperty("SomeGuid", value); }
    	}
    
    	public System.Nullable<System.Guid> SomeNullableGuid
    	{
            		get { return GetRelatedProperty<System.Nullable<System.Guid>>("SomeNullableGuid"); }
            		set { SetRelatedProperty("SomeNullableGuid", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestEnumeration SomeEnumeration
    	{
            		get { return GetRelatedProperty<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestEnumeration>("SomeEnumeration"); }
            		set { SetRelatedProperty("SomeEnumeration", value); }
    	}
    
    	public System.Nullable<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestEnumeration> SomeNullableEnumeration
    	{
            		get { return GetRelatedProperty<System.Nullable<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestEnumeration>>("SomeNullableEnumeration"); }
            		set { SetRelatedProperty("SomeNullableEnumeration", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestFlagsEnumeration SomeFlagsEnumeration
    	{
            		get { return GetRelatedProperty<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestFlagsEnumeration>("SomeFlagsEnumeration"); }
            		set { SetRelatedProperty("SomeFlagsEnumeration", value); }
    	}
    
    	public System.Nullable<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestFlagsEnumeration> SomeNullableFlagsEnumeration
    	{
            		get { return GetRelatedProperty<System.Nullable<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.TestFlagsEnumeration>>("SomeNullableFlagsEnumeration"); }
            		set { SetRelatedProperty("SomeNullableFlagsEnumeration", value); }
    	}
    	public System.Collections.Generic.ICollection<System.String> CollectionOfStrings
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("CollectionOfStrings"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("CollectionOfStrings", value); }
    	}
    	public System.Collections.Generic.ICollection<System.DateTime> CollectionOfDateTimes
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.DateTime>("CollectionOfDateTimes"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.DateTime>("CollectionOfDateTimes", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Boolean> CollectionOfBools
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Boolean>("CollectionOfBools"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Boolean>("CollectionOfBools", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Decimal> CollectionOfDecimals
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Decimal>("CollectionOfDecimals"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Decimal>("CollectionOfDecimals", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Double> CollectionOfDoubles
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Double>("CollectionOfDoubles"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Double>("CollectionOfDoubles", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Single> CollectionOfFloats
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Single>("CollectionOfFloats"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Single>("CollectionOfFloats", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Int32> CollectionOfInts
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Int32>("CollectionOfInts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Int32>("CollectionOfInts", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Int64> CollectionOfLong
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Int64>("CollectionOfLong"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Int64>("CollectionOfLong", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    public partial class FoafAgent : BrightstarEntityObject, IFoafAgent 
    {
    	public FoafAgent(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public FoafAgent(BrightstarEntityContext context) : base(context, typeof(FoafAgent)) { }
    	public FoafAgent() : base() { }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent
    	public System.Collections.Generic.ICollection<System.String> MboxSums
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("MboxSums"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("MboxSums", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    [DisplayName("Person")]
    public partial class FoafPerson : BrightstarEntityObject, IFoafPerson 
    {
    	public FoafPerson(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public FoafPerson(BrightstarEntityContext context) : base(context, typeof(FoafPerson)) { }
    	public FoafPerson() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson
    	
    	[System.ComponentModel.DisplayNameAttribute("Also Known As")]
    	public System.String Nickname
    	{
            		get { return GetRelatedProperty<System.String>("Nickname"); }
            		set { SetRelatedProperty("Nickname", value); }
    	}
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String Organisation
    	{
            		get { return GetRelatedProperty<System.String>("Organisation"); }
            		set { SetRelatedProperty("Organisation", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson> Knows
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson>("Knows"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Knows", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson> KnownBy
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafPerson>("KnownBy"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("KnownBy", value); }
    								}
    
    	public System.Nullable<System.DateTime> BirthDate
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("BirthDate"); }
            		set { SetRelatedProperty("BirthDate", value); }
    	}
    
    	public System.Uri Homepage
    	{
            		get { return GetRelatedProperty<System.Uri>("Homepage"); }
            		set { SetRelatedProperty("Homepage", value); }
    	}
    	#endregion
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IFoafAgent
    	public System.Collections.Generic.ICollection<System.String> MboxSums
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.String>("MboxSums"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.String>("MboxSums", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    public partial class JobRole : BrightstarEntityObject, IJobRole 
    {
    	public JobRole(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public JobRole(BrightstarEntityContext context) : base(context, typeof(JobRole)) { }
    	public JobRole() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson> Persons
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Persons"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Persons", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    public partial class Person : BrightstarEntityObject, IPerson 
    {
    	public Person(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Person(BrightstarEntityContext context) : base(context, typeof(Person)) { }
    	public Person() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.Nullable<System.DateTime> DateOfBirth
    	{
            		get { return GetRelatedProperty<System.Nullable<System.DateTime>>("DateOfBirth"); }
            		set { SetRelatedProperty("DateOfBirth", value); }
    	}
    
    	public System.Int32 Age
    	{
            		get { return GetRelatedProperty<System.Int32>("Age"); }
            		set { SetRelatedProperty("Age", value); }
    	}
    
    	public System.Int32 Salary
    	{
            		get { return GetRelatedProperty<System.Int32>("Salary"); }
            		set { SetRelatedProperty("Salary", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson Mother
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Mother"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Mother", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson Father
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Father"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Father", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson> Friends
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Friends"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Friends", value); }
    								}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal Pet
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal>("Pet"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IAnimal>("Pet", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill MainSkill
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>("MainSkill"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>("MainSkill", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill> Skills
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>("Skills"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Skills", value); }
    								}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment Department
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment>("Department"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IDepartment>("Department", value); }
    	}
    
    	public System.Int32 EmployeeId
    	{
            		get { return GetRelatedProperty<System.Int32>("EmployeeId"); }
            		set { SetRelatedProperty("EmployeeId", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole JobRole
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole>("JobRole"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IJobRole>("JobRole", value); }
    	}
    	public System.Collections.Generic.ICollection<System.Uri> Websites
    	{
    		get { return GetRelatedLiteralPropertiesCollection<System.Uri>("Websites"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedLiteralPropertiesCollection<System.Uri>("Websites", value); }
    	}
    	#endregion
    }
}
namespace BrightstarDB.Portable.MonoTouch.Tests.EntityFramework 
{
    
    public partial class Skill : BrightstarEntityObject, ISkill 
    {
    	public Skill(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Skill(BrightstarEntityContext context) : base(context, typeof(Skill)) { }
    	public Skill() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson Expert
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Expert"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("Expert", value); }
    	}
    
    	public BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill Parent
    	{
            get { return GetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>("Parent"); }
            set { SetRelatedObject<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill> Children
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.ISkill>("Children"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Children", value); }
    								}
    	public System.Collections.Generic.ICollection<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson> SkilledPeople
    	{
    		get { return GetRelatedObjects<BrightstarDB.Portable.MonoTouch.Tests.EntityFramework.IPerson>("SkilledPeople"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SkilledPeople", value); }
    								}
    	#endregion
    }
}
