 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;


namespace BrightstarDB.Samples.EntityFramework.GettingStarted 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	private static readonly EntityMappingStore TypeMappings;
    	
    	static MyEntityContext() 
    	{
    		TypeMappings = new EntityMappingStore();
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Samples.EntityFramework.GettingStarted.IActor));
    		TypeMappings.SetImplMapping<BrightstarDB.Samples.EntityFramework.GettingStarted.IActor, BrightstarDB.Samples.EntityFramework.GettingStarted.Actor>();
    		provider.AddMappingsForType(TypeMappings, typeof(BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm));
    		TypeMappings.SetImplMapping<BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm, BrightstarDB.Samples.EntityFramework.GettingStarted.Film>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore, EntityMappingStore typeMappings = null) : base(typeMappings ?? TypeMappings, dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null,
            EntityMappingStore typeMappings = null
        ) : base(typeMappings ?? TypeMappings, connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(EntityMappingStore typeMappings = null) : base(typeMappings ?? TypeMappings)
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri,
            EntityMappingStore typeMappings = null
    	) : base(typeMappings ?? TypeMappings, updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Actors = 	new BrightstarEntitySet<BrightstarDB.Samples.EntityFramework.GettingStarted.IActor>(this);
    		Films = 	new BrightstarEntitySet<BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm>(this);
    	}
    	
    	public IEntitySet<BrightstarDB.Samples.EntityFramework.GettingStarted.IActor> Actors
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm> Films
    	{
    		get; private set;
    	}
    	
    }
}
namespace BrightstarDB.Samples.EntityFramework.GettingStarted 
{
    
    public partial class Actor : BrightstarEntityObject, IActor 
    {
    	public Actor(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Actor() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BrightstarDB.Samples.EntityFramework.GettingStarted.IActor
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.DateTime DateOfBirth
    	{
            		get { return GetRelatedProperty<System.DateTime>("DateOfBirth"); }
            		set { SetRelatedProperty("DateOfBirth", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm> Films
    	{
    		get { return GetRelatedObjects<BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm>("Films"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Films", value); }
    								}
    	#endregion
    }
}
namespace BrightstarDB.Samples.EntityFramework.GettingStarted 
{
    
    public partial class Film : BrightstarEntityObject, IFilm 
    {
    	public Film(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Film() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BrightstarDB.Samples.EntityFramework.GettingStarted.IFilm
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	public System.Collections.Generic.ICollection<BrightstarDB.Samples.EntityFramework.GettingStarted.IActor> Actors
    	{
    		get { return GetRelatedObjects<BrightstarDB.Samples.EntityFramework.GettingStarted.IActor>("Actors"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Actors", value); }
    								}
    	#endregion
    }
}
