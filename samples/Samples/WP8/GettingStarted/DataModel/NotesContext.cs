 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.Net;

namespace GettingStarted.DataModel 
{
    public partial class NotesContext : BrightstarEntityContext {
    	private static readonly EntityMappingStore TypeMappings;
    	
    	static NotesContext() 
    	{
    		TypeMappings = new EntityMappingStore();
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(TypeMappings, typeof(GettingStarted.DataModel.ICategory));
    		TypeMappings.AddImplMapping<GettingStarted.DataModel.ICategory, GettingStarted.DataModel.Category>();
    		provider.AddMappingsForType(TypeMappings, typeof(GettingStarted.DataModel.INote));
    		TypeMappings.AddImplMapping<GettingStarted.DataModel.INote, GettingStarted.DataModel.Note>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the Brightstar Data Object Store that will provide the entity objects</param>
    	public NotesContext(IDataObjectStore dataObjectStore) : base(TypeMappings, dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
    	public NotesContext(string connectionString, bool? enableOptimisticLocking=null) : base(TypeMappings, connectionString, enableOptimisticLocking)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public NotesContext() : base(TypeMappings)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Categories = 	new BrightstarEntitySet<GettingStarted.DataModel.ICategory>(this);
    		Notes = 	new BrightstarEntitySet<GettingStarted.DataModel.INote>(this);
    	}
    	
    	public IEntitySet<GettingStarted.DataModel.ICategory> Categories
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<GettingStarted.DataModel.INote> Notes
    	{
    		get; private set;
    	}
    	
    }
}
namespace GettingStarted.DataModel 
{
    
    public partial class Category : BrightstarEntityObject, ICategory 
    {
    	public Category(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Category() : base() { }
    	public System.String CategoryId { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of GettingStarted.DataModel.ICategory
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    	#endregion
    }
}
namespace GettingStarted.DataModel 
{
    
    public partial class Note : BrightstarEntityObject, INote 
    {
    	public Note(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Note() : base() { }
    	public System.String NoteId { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of GettingStarted.DataModel.INote
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    
    	public System.String Content
    	{
            		get { return GetRelatedProperty<System.String>("Content"); }
            		set { SetRelatedProperty("Content", value); }
    	}
    
    	public GettingStarted.DataModel.ICategory Category
    	{
            get { return GetRelatedObject<GettingStarted.DataModel.ICategory>("Category"); }
            set { SetRelatedObject<GettingStarted.DataModel.ICategory>("Category", value); }
    	}
    	#endregion
    }
}
