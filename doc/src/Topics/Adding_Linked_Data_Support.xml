<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Adding Linked Data Support</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Adding Linked Data Support</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">As data on the web becomes more predominant, it is becoming increasingly important to be able to expose the underlying data of a web application in some way that is easy for external applications to consume. While many web applications choose to expose bespoke APIs, these are difficult for developers to use because each API has its own data structures and calls to access data. However there are two well supported standards for publishing data on the web - OData and SPARQL.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">OData is an open standard, originally created by Microsoft, that provides a framework for exposing a collection of entities as data accessible by URIs and represented in ATOM feeds. SPARQL is a standard from the W3C for querying an RDF data store. Because BrightstarDB is, under the hood, an RDF data store adding SPARQL support is pretty straightforward; and because the BrightstarDB Entity Framework provides a set of entity classes, it is also very easy to create an OData endpoint.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In this section we will show how to add these different forms of Linked Data to your web application.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Create a SPARQL Action</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The standard way of interfacing to a SPARQL endpoint is to either use an HTTP GET with a ?query= parameter that carries the SPARQL query as a string; or to use an HTTP POST which has a form encoded in the POST request with a query field in it. For this example we will do the latter as it is easiest to show and test with a browser-based API. We will create a query action at /sparql, and include a form that allows a SPARQL query to be submitted through the browser. To do this we need to create a new Controller to handle the /sparql URL.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Right-click on the Controllers folder and choose Add &gt; Controller. In the dialog that is displayed, change the controller name to SparqlController, and choose the Empty MVC Controller template option from the drop-down list.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Edit the SparqlController.cs file to add the following two methods to the class:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public ViewResult Index()</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;return View();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[HttpPost]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[ValidateInput(false)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public ActionResult Index(string query)</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;if (String.IsNullOrEmpty(query))</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;return View(&quot;Error&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;var client = BrightstarService.GetClient();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;var results = client.ExecuteQuery(&quot;NerdDinner&quot;, query);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;return new FileStreamResult(results, &quot;application/xml; charset=utf-16&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The first method just displays a form that will allow a user to enter a SPARQL query. The second method handles a POST operation and extracts the SPARQL query and executes it, returning the results to the browser directly as an XML data stream.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Create a new folder under Views called &quot;Sparql&quot; and add a new View to the Views\Sparql with the name Index.cshtml. This view simply displays a form with a large enough text box to allow a query to be entered.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;h2&gt;SPARQL&lt;/h2&gt;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">@using (Html.BeginForm()) {</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;@Html.ValidationSummary(true)</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; </text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&lt;p&gt;Enter your SPARQL query in the text box below:&lt;/p&gt;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;@Html.TextArea(&quot;query&quot;, &quot;SELECT ?d WHERE {?d a &lt;http://brightstardb.com/namespaces/default/Dinner&gt;}&quot;, 10, 50, null)</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&lt;p&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;&lt;input type=&quot;submit&quot; value=&quot;Query&quot; /&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&lt;/p&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Now you can compile and run the web application again and click on the Query SPARQL link at the top of the page (or simply navigate to the /sparql address for the web application). As this is a normal browser HTTP GET, you will see the form rendered by the first of the two action methods. By default this contains a SPARQL query that should work nicely against the NerdDinner entity model, returning the URI identifiers of all Dinner entities in the BrightstarDB data store.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc15.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Clicking on the Query button submits the form, simulating an HTTP POST from an external application. The results are returned as raw XML, which will be formatted and displayed depending on which browser you use and your browser settings (the screenshot below is from a Firefox browser window).</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc16.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating an OData Provider</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The Open Data Protocol (OData) is an open web protocol for querying and updating data. An OData provider can be added to BrightstarDB Entity Framework projects to allow OData consumers to query the underlying data.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following steps describe how to create an OData provider to an existing project (in this example we add to the NerdDinner MVC Web Application project).</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">1. Right-click on the project in the Solution Explorer and select Add New Item. In the dialog that is displayed click on Web, and select WCF Data Service. Rename this to OData.svc and click &apos;add&apos;.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="odata_1_additem.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">2. Change the class inheritance from DataService to EntityDataService, and add the name of the BrightstarEntityContext to the type argument.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">3. Edit the body of the method with the following configuration settings:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public class OData : EntityDataService&lt;NerdDinnerContext&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">// This method is called only once to initialize service-wide policies.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">public static void InitializeService(DataServiceConfiguration config)</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">config.SetEntitySetAccessRule(&quot;*&quot;, EntitySetRights.AllRead);</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">config.SetEntitySetAccessRule(&quot;NerdDinnerLogin&quot;, EntitySetRights.None); </text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">config.SetServiceOperationAccessRule(&quot;*&quot;, ServiceOperationRights.All);</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">config.DataServiceBehavior.MaxProtocolVersion = DataServiceProtocolVersion.V2;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">The NerdDinnerLogin set has been given EntitySetRights of None. This hides the set (which contains sensitive login information) from the OData service</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">4. Rebuild and run the project. Navigation to /OData.svc and you will see the standard OData metadata page displaying the entity sets from BrightstarDB</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="odata_2_metadata.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">5. The OData service can now be queried using the standard OData conventions. There are a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="OData" styleclass="Normal" translate="true">few restrictions</link><text styleclass="Normal" translate="true"> when using OData services with BrighstarDB.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="odata_3_querying.png" scale="100.00%" styleclass="Image Caption"></image></para>
  </body>
</topic>
