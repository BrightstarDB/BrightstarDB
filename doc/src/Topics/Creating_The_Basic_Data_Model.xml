<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Creating The Basic Data Model</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating The Basic Data Model</text></para>
    </header>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating the ASP.NET MVC4 Application.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Step 1: Create a New Empty ASP.NET MVC4 Application</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc0.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Choose “ASP.NET MVC 4 Web Application” from the list of project types in Visual Studio. If you do not already have MVC 4 installed you can download it from </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.asp.net/mvc/mvc4" target="_blank" styleclass="Normal" translate="true">http://www.asp.net/mvc/mvc4<title translate="true">ASP.NET MVC 3</title></link><text styleclass="Normal" translate="true">. You must also install the &quot;Visual Web Developer&quot; feature in Visual Studio to be able to open and work with MVC projects. Choose a name for your application (we are using BrightstarDB.Samples.NerdDinner), and then click OK. In the next dialog box, select “Empty” for the template type, this mean that the project will not be pre-filled with any default controllers, models or views so we can show every step in building the application. Choose “Razor” as the View Engine. Leave the “Create a unit test project” box unchecked, as for the purposes of this example project it is not needed.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc0a.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Step 2: Add references to BrightstarDB</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Add a reference in your project to the BrightstarDB DLL from the BrightstarDB SDK.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Step 3: Add a connection string to your BrightstarDB location</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Open the web.config file in the root directory your new project, and add a connection string to the location of your BrightstarDB store. There is no setup required - you can name a store that does not exist and it will be created the first time that you try to connect to it from the application. The only thing you will need to ensure is that if you are using an HTTP, TCP or Named Pipe connection, the BrightstarDB service must be running.</text></para>
    <para styleclass="XML HTML Example"><text styleclass="XML HTML Example" translate="true"> &#160;&lt;appSettings&gt;</text></para>
    <para styleclass="XML HTML Example"><text styleclass="XML HTML Example" translate="true"> &#160; &#160;...</text></para>
    <para styleclass="XML HTML Example"><text styleclass="XML HTML Example" translate="true"> &#160; &#160;&lt;add key=&quot;BrightstarDB.ConnectionString&quot; value=&quot;Type=http;endpoint=http://localhost:8090/brightstar;StoreName=NerdDinner&quot; /&gt;</text></para>
    <para styleclass="XML HTML Example"><text styleclass="XML HTML Example" translate="true"> &#160;&lt;/appSettings&gt;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For more information about connection strings, please read the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Connection_Strings" anchor="connectionstrings" styleclass="Normal" translate="true">&quot;Connection Strings&quot; topic</link></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Step 4: Add the Brightstar Entity Context into your project</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Select Add &gt; New Item on the Models folder, and select &quot;Brightstar Entity Context&quot; from the Data category. Rename it to NerdDinnerContext.tt</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc2.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Step 5: Creating the data model interfaces</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB data models are defined by a number of standard .NET interfaces with certain attributes set. The NerdDinner model is very simple (especially for this tutorial) and only consists of a set of “Dinners” that refer to specific events that people can attend, and also a set of “RSVP”s that are used to track a person’s interest in attending a dinner.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We create the two interfaces as shown below in the Models folder of our project.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">IDinner.cs:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System.Collections.Generic;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System.ComponentModel.DataAnnotations;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using BrightstarDB.EntityFramework;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">namespace BrightstarDB.Samples.NerdDinner.Models</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;public interface IDinner</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Identifier(&quot;http://nerddinner.com/dinners/&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string Id { get; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Required(ErrorMessage = &quot;Please provide a title for the dinner&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string Title { get; set; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string Description { get; set; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Display(Name = &quot;Event Date&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[DataType(DataType.DateTime)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;DateTime EventDate { get; set; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Required(ErrorMessage = &quot;The event must have an address.&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string Address { get; set; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Required(ErrorMessage = &quot;Please enter the name of the host of this event&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Display(Name = &quot;Host&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string HostedBy { get; set; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;ICollection&lt;IRSVP&gt; RSVPs { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">IRSVP.cs:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System.ComponentModel.DataAnnotations;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using BrightstarDB.EntityFramework;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">namespace BrightstarDB.Samples.NerdDinner.Models</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;public interface IRSVP</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Identifier(&quot;http://nerddinner.com/rsvps/&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string Id { get; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Display(Name = &quot;Email Address&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[Required(ErrorMessage = &quot;Email address is required&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;string AttendeeEmail { get; set; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;[InverseProperty(&quot;RSVPs&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;IDinner Dinner { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">By default, BrightstarDB identifier properties are automatically generated URIs that are automatically. In order to work with simpler values for our entity Ids we decorate the Id property with an identifier attribute. This adds a prefix for BrightstarDB to use when generating and querying the entity identifiers and ensures that the actual value we get in the Id property is just the part of the URI that follows the prefix, which will be a simple GUID string.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the IRSVP interface, we add an InverseProperty attribute to the Dinner property, and set it to the name of the .NET property on the referencing type (&quot;RSVPs&quot;). This shows that these two properties reflect different sides of the same association. In this case the association is a one-to-many relationship (one dinner can have many RSVPs), but BrightstarDB also supports many-to-many and many-to-one relationships using the same mechanism.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We can also add other attributes such as those from the System.ComponentModel.DataAnnotations namespace to provide additional hints for the MVC framework such as marking a property as required, providing an alternative display name for forms or specifying the way in which a property should be rendered. These additional attributes are automatically added to the classes generated by the BrightstarDB Entity Framework. For more information about BrightstarDB Entity Framework attributes and passing through additional attributes, please refer to the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Annotations_Guide" styleclass="Normal" translate="true">Annotations</link><text styleclass="Normal" translate="true"> section of the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Entity_Framework" styleclass="Normal" translate="true">Entity Framework</link><text styleclass="Normal" translate="true"> documentation.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Step 6: Creating a context class to handle database persistence</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Right click on the Brightstar Entity Context and select “Run Custom Tool”. This runs the text templating tool that updates the .cs file contained within the .tt file with the most up to date persistence code needed for your interfaces. Any time you modify the interfaces that define your data model, you should re-run the text template to regenerate the context code.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We now have the basic data model for our application completed and have generated the code for creating persistent entities that match our data model and storing them in BrightstarDB. In the next step we will see how to use this data model and context in creating screens in our MVC application.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Running the application</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Hit F5 to start up the application in Debug mode. This opens a browser window that by default starts in the Index action of the HomeController. As we have not yet added any dinners yet, the list is empty, but we can click on “Create New” to go to the Create view to add some dinners.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc8.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note that the custom attributes entered in the entity interface have been picked up by MVC. If you attempt to submit this form without filling in Title, Address or Host you will see the form validation errors on the page.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">After entering some data we can see them in the list on the index page</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="mvc9.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We can also easily view the details of a dinner, edit the details or delete the dinner by using the links next to each item on the list.</text></para>
  </body>
</topic>
