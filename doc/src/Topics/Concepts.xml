<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="kal_000" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Concepts</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Concepts</text></para>
    </header>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Architecture</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB is a native .NET NoSQL semantic web database. It can be used as an embedded database or run as a service. When run as a service clients can connect using HTTP, TCP/IP or Named Pipes. While the core data model is RDF triples and the query language SPARQL BrightstarDB provides a code-first Entity Framework. The Entity Framework tools take .NET interfaces and generate concrete classes that persist their data in BrightstarDB. As well as the Entity Framework there is a low level </text><link displaytype="text" defaultstyle="true" type="topiclink" href="RDF_Client_API" styleclass="Normal" translate="true">RDF API</link><text styleclass="Normal" translate="true"> for working with the underlying data. BrightstarDB (in the Enterprise and Server versions) also provides a management studio called </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Using_Polaris" styleclass="Normal" translate="true">Polaris</link><text styleclass="Normal" translate="true"> for running queries and transactions against a BrightstarDB service.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following diagram provides an overview of the BrightstarDB architecture.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="Architecture.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Data Model</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB supports the </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/2004/REC-rdf-primer-20040210/" target="_blank" styleclass="Normal" translate="true">W3C RDF</link><text styleclass="Normal" translate="true"> and SPARQL 1.1 </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/sparql11-query/" target="_blank" styleclass="Normal" translate="true">Query</link><text styleclass="Normal" translate="true"> and </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/sparql11-update/" target="_blank" styleclass="Normal" translate="true">Update</link><text styleclass="Normal" translate="true">. standards, the data model stored is triples with a graph context (often this is called a quad store). The triple data structure is very powerful, especially for creating associative data models, merging data from many sources, and for giving unique persistent and global identity to &apos;things&apos;. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:normal;" translate="true">A </text><text styleclass="Normal" style="font-weight:bold;" translate="true">triple</text><text styleclass="Normal" style="font-weight:normal;" translate="true"> is defined as having three parts: A subject URI, a predicate URI, and an object value. The subject URI is the identifier for some thing. A person, company, product etc. The predicate is an identifier for a property type and the object can either be the identifier for another thing, or a literal value. Literal values can also have data types.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:normal;" translate="true">An example of a literal property assigned to some thing is:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" style="font-weight:normal;" translate="true">&lt;http://www.brightstardb.com/companies/brightstardb&gt; &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; &quot;BrightstarDB&quot; .</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">and a connection between two entities is described</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" style="font-weight:normal;" translate="true">&lt;http://www.brightstardb.com/companies/brightstardb&gt; &lt;http://www.brightstardb.com/types/hasproduct&gt; &lt;http://www.brightstardb.com/products/brightstardb&gt; .</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Storage Features</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB is a write once, read many store (WORM). Modifications to data are appended to the end of the storage file, no data is ever overwritten. It employs a single writer, concurrent reader model. This supports concurrent read with no possibility of reading dirty data. Reads are not blocked while writes occur. The WORM store approach supports rollback or querying of the complete database at any transaction point. The store can be periodically coalesced to manage file size growth at the expense of removing previous transaction points.</text></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Client APIs</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">There are three different code layers with which to access BrightstarDB. The first of these is the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="RDF_Client_API" styleclass="Normal" translate="true">RDF Client API</link><text styleclass="Normal" translate="true">. This is a low level API that allows developers to insert and delete triples, and run SPARQL queries. The second API layer is the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Data_Object_Layer" styleclass="Normal" translate="true">Data Object Layer</link><text styleclass="Normal" translate="true">. This provides the ability to &#160;treat a collection of triples with the same subject as a single unit and also provides support for RDF list structures and optimistic locking. The highest API layer is the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Entity_Framework" styleclass="Normal" translate="true">BrightstarDB Entity Framework</link><text styleclass="Normal" translate="true">. BrightstarDB enables data-binding from items at the Data Object Layer to full .NET objects described by a programmer-defined interface. As well as storing object state BrightstarDB also allows developers to use LINQ expressions to query the data they have created.</text></para>
  </body>
</topic>
