<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Admin API</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Admin API</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In addition to the APIs already covered for updating and querying stores, there are a number of useful administration APIs also provided by BrightstarDB. </text><conditional-text type="IF" value="EMBEDDED,ENTERPRISE,SERVER"/><text styleclass="Normal" translate="true">A Visual Studio solution file containing some sample applications that use these APIs can be found in [INSTALLDIR]/Samples/StoreAdmin.</text><conditional-text type="END"/></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Managing Commit Points</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Commit Points are a feature that is only available with the Append-Only store persistence type. If you are accessing a store that uses the Rewrite persistence type, operations on a Commit Points are not supported and will raise a BrightstarClientException if an attempt is made to query against or revert to a previous Commit Point.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Each time a transaction is committed to a BrightstarDB store, a new commit point is written. Unlike a traditional database log file, a commit point provides a complete snapshot of the state of the BrightstarDB store immediately after the commit took place. This means that it is possible to query the BrightstarDB store as it existed at some previous point in time. It is also possible to revert the store to a previous commit point, but in keeping with the BrightstarDB architecture, this operation doesn&apos;t actually delete the commit points that followed, but instead makes a new commit point which duplicates the commit point selected for the revert.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">To Retrieve a List of Commit Points</text></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:normal;" translate="true">The method to retrieve a list of commit points from a store is GetCommitPoints() on the IBrightstarService interface. There are two versions of this method. The first takes a store name and skip and take parameters to define a subrange of commit points to retrieve, the second adds a date/time range in the form of two date time parameters to allow more specific selection of a particular commit point range. The code below shows an example of using the first of these methods:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// Create a client - the connection string used is configured in the App.config file.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var client = BrightstarService.GetClient();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">foreach(var commitPointInfo in client.GetCommitPoints(storeName, 0, 10))</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;// Do something with each commit point</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Warning"><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">To avoid operations that return potentially very large results sets, the server will not return more than 100 commit points at a time, attempting to set the take parameter higher than 100 will result in an ArgumentException being raised.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The structures returned by the GetCommitPoints() method implement the ICommitPointInfo interface, this interface provides access to the following properties:</text></para>
    <para styleclass="Normal"></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:10pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">StoreName - the name of the store that the commit point is associated with</text></li>
      <li styleclass="Normal"><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">Id - the commit point identifier. This identifier is unique amongst all commit points in the same store.</text></li>
      <li styleclass="Normal"><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">CommitTime - the UTC date/time when the commit was made</text></li>
      <li styleclass="Normal"><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">JobId - the GUID identifier of the transaction job that resulted in the commit. The value of this property may be Guid.Empty for operations that were not associated with a transaction job (e.g initial store creation).</text></li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Querying A Commit Point</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To execute a SPARQL query against a particular commit point of a store, use the overload of the ExecuteQuery method that takes an ICommitPointInfo parameter rather than a store name string parameter:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var resultsStream = client.ExecuteQuery(commitPointInfo, sparqlQuery);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The resulting stream can be processed in exactly the same way as if you had queried the current state of the store.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Reverting The Store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Reverting the store takes a copy of an old commit point and pushes it to the top of the commit point list for the store. Queries and updates are then applied to the store as normal, and the data modified by commit points since the reverted one is effectively hidden. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This operation does not delete the commit points added since the reverted one, those commit points are still there as long as a Coalesce operation is not performed, meaning that it is possible to &quot;re-revert&quot; the store to its state before the revert was applied. The method to revert a store is also on the IBrightstarService interface and is shown below;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var client = BrightstarService.GetClient();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">ICommitPointInfo commitPointInfo = ... ; // Code to get the commit point we want to revert to</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.RevertToCommitPoint(storeName, commitPointInfo); // Reverts the store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Consolidate The Store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Over time the size of the BrightstarDB store will grow. Each separate commit adds new data to the store, even if the commit deletes triples from the store the commit itself will extend the store file. The ConsolidateStore operation enables the BrightstarDB store to be compressed, removing all commit point history. The operation rewrites the store data file to a shadow file and then replaces the existing data file with the new compressed data file and updates the master file. The consolidate operation blocks new writers, but allows readers to continue accessing the data file up until the shadow file is prepared. The code required to start a consolidate operation is shown below:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var client = BrightstarService.GetClient();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var consolidateJob = client.ConsolidateStore(storeName);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This method submits the consolidate operation to the store as a long-running job. Because this operation may take some time to complete the call does not block, but instead returns an IJobInfo structure which can be used to monitor the job. The code below shows a typical loop for monitoring the consolidate job:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">while (!(consolidateJob.JobCompletedOk || consolidateJob.JobCompletedWithErrors))</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;System.Threading.Thread.Sleep(500);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;consolidateJob = client.GetJobInfo(storeName, consolidateJob.JobId);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
