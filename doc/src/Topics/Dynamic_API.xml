<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="gra" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Dynamic API</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Dynamic API</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The Dynamic API is a thin layer on top of the data object layer. It is designed to further ease the use of .NET with RDF data and to provide a model for persisting data in systems that make use of the .NET dynamic keyword. The .NET dynamic keyword and dynamic runtime allow properties of objects to be set at runtime without any prior class definition.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following example shows how dynamics work in general. Both &apos;Name&apos; and &apos;Type&apos; are resolved at runtime. In this case they are simply stored as properties in the ExpandoObject. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dynamic d = new ExpandoObject();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">d.Name = &quot;Brightstar&quot;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">d.Type = &quot;Product&quot;;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Dynamic Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A dynamic context can be used to create dynamic objects whose state is persisted as RDF in BrightstarDB. To use the dynamic context a normal DataObjectContext must be created first. From the context a store can be created or opened. The store provides methods to create and fetch dynamic objects. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var dataObjectContext = BrightstarService.GetDataObjectContext();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// create a dynamic context</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var dynaContext = new BrightstarDynamicContext(dataObjectContext);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// create a new store</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var storeId = &quot;DynamicSample&quot; + Guid.NewGuid().ToString();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var dynaStore = dynaContext.CreateStore(storeId);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Dynamic Object</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The dynamic object is a wrapper around the IDataObject. When a dynamic property is set this is translated into an update to the IDataObject and in turn into RDF. By default the name of the property is appended to &#160;the default namespace. By using namespace mappings any RDF vocabulary can be mapped. If the value of the property is set to be a list of values then multiple triples are created, one for each value.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dynamic brightstar = dynaStore.MakeNewObject();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">brightstar.name = &quot;BrightstarDB&quot;;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// namespaces are used by having the prefix comes before &apos;__&apos;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// setting a list of values creates multiple properties on the object.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">brightstar.rdfs__label = new[] { &quot;BrightstarDB&quot;, &quot;NoSQL Database&quot; };</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dynamic product = dynaStore.MakeNewObject();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// objects are connected together in the same way</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">brightstar.rdfs__type = product;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Saving Changes</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The data updated in a context is persisted when SaveChanges is called on the store object.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dynaStore.SaveChanges();</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Loading Data</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">After opening a store dynamic objects can be loaded via the GetDataObject method or the BindObjectsWithSparql method.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dynaStore = dynaContext.OpenStore(storeId);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var object = </text><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">dynaStore.GetDataObject(aUri);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Font Style" style="font-family:Consolas; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">// any sparql that returns a single variable can be bound as dynamic objects</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var objects = dynaStore.BindObjectsWithSparql(&quot;select distinct ?dy where { ?dy ?p ?o }&quot;);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
