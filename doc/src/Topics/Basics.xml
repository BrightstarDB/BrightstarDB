<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Basics</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Basics</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The BrightstarDB Entity Framework tooling is very simple to use. This guide shows how to get going, the rest of this section provides more in-depth information.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The process of using the Entity Framework is to:</text></para>
    <para styleclass="Normal"></para>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Arial; font-size:10pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Include the BrightstarDB Entity Context item into a project.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Define the interfaces for the data objects that should be persistent.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Run the custom tool on the Entity Context text template file.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Use the generated context to create, query or get and modify objects.</text></li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Including the BrightstarDB Entity Context</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Normal" style="font-weight:bold;" translate="true">&quot;Brightstar Entity Context&quot;</text><text styleclass="Normal" translate="true"> is a text template that when run introspects the other code elements in the project and generates a number of classes and a context in a single file that can be found under the context file in Visual Studio. To add a new BrightstarEntityContext add a new item to the project. Locate the item in the list called Brightstar Entity Context, rename it if required, and add to the current project.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="getting-started-add-entity-context.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Define Interfaces</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:normal;" translate="true">Interfaces are used to define a data model contract. Only interfaces marked with the Entity attribute will be processed by the text template. The following interfaces define a model that captures the idea of people working for an company. &#160;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public interface IPerson</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;string Name { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;DateTime DateOfBirth { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;string CV { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;ICompany Employer { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public interface ICompany</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;string Name { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;[InverseProperty(&quot;Employer&quot;)]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;ICollection&lt;IPerson&gt; Employees { get; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Including a Brightstar Entity Definition Item</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">One quick way to include the outline of a BrightstarDB entity in a project is to right click on the project in the solution explorer and click &quot;Add New Item&quot;. Then select the </text><text styleclass="Normal" style="font-weight:bold;" translate="true">&quot;Brightstar Entity Definition&quot;</text><text styleclass="Normal" translate="true"> from the list and update the name.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="ef-include-entity-def.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This will add the following code file into the project.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public interface IMyEntity1</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;/// &lt;summary&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;/// Get the persistent identifier for this entity</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;/// &lt;/summary&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;string Id { get; }</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;// TODO: Add other property references here</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Run the MyEntityContext.tt Custom Tool</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To ensure that the generated classes are up to date right click on the .tt file in the solution explorer and select </text><text styleclass="Normal" style="font-weight:bold;" translate="true">&quot;Run Custom Tool&quot;</text><text styleclass="Normal" style="font-weight:normal;" translate="true">. This will ensure that the all the annotated interfaces are turned into concrete classes.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" style="font-weight:normal;" translate="true">The custom tool is not run automatically on every rebuild so after changing an interface remember to run it.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Using a Context</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A context can be thought of as a connection to a BrightstarDB instance. It provides access to the collections of domain objects defined by the interfaces. It also tracks all changes to objects and is responsible for executing queries and committing transactions.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A context can be opened with a connection string. If the store named does not exist it will be created. See the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Connection_Strings" anchor="connectionstrings" styleclass="Normal" translate="true">connection strings</link><text styleclass="Normal" translate="true"> section for more information on allowed configurations. The following code opens a new context connecting to an embedded store.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var dataContext = new MyEntityContext(&quot;Type=embedded;StoresDirectory=c:\brightstardb;StoreName=test&quot;);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The context exposes a collection for each entity type defined. For the types we defined above the following collections are exposed on a context.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var people = dataContext.Persons;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var companies = dataContext.Companies;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Each of these collections are in fact IQueryable and as such support LINQ queries over the model. To get an entity by a given property the following can be used:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var </text><text styleclass="Code Example" style="font-weight:normal;" translate="true">brightstardb</text><text styleclass="Code Example" translate="true"> = dataContext.Companies.Where(c =&gt; c.Name.Equals(&quot;B</text><text styleclass="Code Example" style="font-weight:normal;" translate="true">rightstarDB</text><text styleclass="Code Example" translate="true">&quot;)).FirstOrDefault();</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Once an entity has been retrieved it can be modified or related entities can be fetched.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// fetching employees</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var employeesOfBrightstarDB = </text><text styleclass="Code Example" style="font-weight:normal;" translate="true">brightstardb</text><text styleclass="Code Example" translate="true">.Employees;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// update the company</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" style="font-weight:normal;" translate="true">brightstardb</text><text styleclass="Code Example" translate="true">.Name = &quot;BrightstarDB&quot;;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">New entities can be created either via the main collection or by using the </text><text styleclass="Normal" style="font-weight:bold;" translate="true">&quot;new&quot; </text><text styleclass="Normal" style="font-weight:normal;" translate="true">keyword and attaching the object to the context. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// creating a new entity via the context collection</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var bob = dataContext.Persons.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">bob.Name = &quot;bob&quot;;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// or created using new and attached to the context</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var bob = new Person() { Name = &quot;Bob&quot; };</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dataContext.Persons.Add(bob);</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">&#32;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Once a new object has been created it can be used in relationships with other objects. The following adds a new person to the collection of employees. The same relationship could also have been created by setting the </text><text styleclass="Normal" style="font-weight:bold;" translate="true">&quot;Employer&quot;</text><text styleclass="Normal" translate="true"> property on the person.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// Adding a new relationship between entities</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var bob = dataContext.Persons.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">bob.Name = &quot;bob&quot;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" style="font-weight:normal;" translate="true">brightstardb</text><text styleclass="Code Example" translate="true">.Employees.Add(bob);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// The relationship can also be defined from the &apos;other side&apos;.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var bob = dataContext.Persons.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">bob.Name = &quot;bob&quot;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">bob.Employer = </text><text styleclass="Code Example" style="font-weight:normal;" translate="true">brightstardb</text><text styleclass="Code Example" translate="true">;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Saving the changes that have occurred is easily done by calling a method on the context.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">dataContext.SaveChanges();</text></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
