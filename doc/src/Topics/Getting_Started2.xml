<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Getting Started</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Getting Started</text></para>
    </header>
    <para style="margin-right:94px; margin-left:94px; background-color:#99ccff;"><text styleclass="Normal" translate="true">Before starting, make sure you have downloaded and installed BrightstarDB.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">After installation has completed you should find a link to Polaris, the BrighstarDB management tool, on the Start menu (inside the folder BrightstarDB). Launch Polaris from this menu entry.</text></para>
    <para styleclass="Normal"><text styleclass="Heading1" translate="true">Connect to your server</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If during installation you chose to register the Windows Service, you should now be able to connect to it. To do this, click on </text><text styleclass="Font Style" style="font-family:Arial; font-size:10pt; font-weight:bold; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">File &gt; Connect...</text><text styleclass="Normal" translate="true"> and then fill out the form that is displayed with the following values:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Font Style" style="font-family:Arial; font-size:10pt; font-weight:bold; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">Connection Name: </text><text styleclass="Normal" translate="true">Local (HTTP)</text></para>
    <para styleclass="Normal"><text styleclass="Font Style" style="font-family:Arial; font-size:10pt; font-weight:bold; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">Connection Type: </text><text styleclass="Normal" translate="true">HTTP</text></para>
    <para styleclass="Normal"><text styleclass="Font Style" style="font-family:Arial; font-size:10pt; font-weight:bold; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">Server Name: </text><text styleclass="Normal" translate="true">localhost</text></para>
    <para styleclass="Normal"><text styleclass="Font Style" style="font-family:Arial; font-size:10pt; font-weight:bold; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">Port Number: </text><text styleclass="Normal" translate="true">8090</text></para>
    <para styleclass="Normal"><text styleclass="Font Style" style="font-family:Arial; font-size:10pt; font-weight:bold; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;" translate="true">Server Path:</text><text styleclass="Normal" translate="true">brightstar</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">After filling in those fields, click OK. There may be a short pause while the initial connection to the server is established, after which you should see the entry for the server appear in the left-hand panel.</text></para>
    <para style="margin-right:94px; margin-left:94px; background-color:#99ccff;"><text styleclass="Normal" translate="true">If you are unable to connect make sure the BrightstarDB Service is running by checking its status using the Windows Services tool.</text></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Getting Started</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">The source code for this example can be found in [INSTALLDIR]\Samples\EntityFramework\RdfClientSamples.sln</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The RDF Client is a simple yet powerful way to query and update a BrightstarDB instance. All the other clients use this client under the hood. This ensures that all access to the store is consistent regardless of which client is being used. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following example shows how to create a new client instance, then create a new store in the database, add some data then query for that data using SPARQL.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This sample assumes that all the DLL&apos;s from the BrightstarDB SDK folder have been referenced from Visual Studio and that an app.config file has been added to the project. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">A New Project</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Create a new project in Visual Studio. For this example we chose a command line application. After creating the project ensure the build target is set to &#160;&apos;.NET 4.0&apos;.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating a client</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Create a new service client using a connection string:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var client = BrightstarService.GetClient(&quot;Type=http;endpoint=http://localhost:8090/brightstar;&quot;);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For more information about connection strings, please read the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Connection_Strings" anchor="connectionstrings" styleclass="Normal" translate="true">&quot;Connection Strings&quot; topic</link></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A new store can be creating using the following code:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">string storeName = &quot;RdfGettingStarted_&quot; + Guid.NewGuid();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.CreateStore(storeName);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Adding data</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Data is added to the store by using NTriples. Each NTriple must be on a single line with no line breaks, a good way to do this is to use a StringBuilder and then using AppendLine for each NTriple:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var data = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/name&gt; \&quot;BrightstarDB\&quot; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/categories/nosql&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/categories/.net&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/categories/rdf&gt; .&quot;);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The ExecuteTransaction() method is used to insert the NTriples data into the store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.ExecuteTransaction(storeName, null, data.ToString());</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Querying data using SPARQL</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB supports </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/sparql11-query/" target="_blank" styleclass="Normal" translate="true">SPARQL 1.1</link><text styleclass="Normal" translate="true"> for querying the data in the store. A simple query on the NTriples above that returns all categories that the subject &quot;Birghtstar DB&quot; is connected to would look like this:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var query = &quot;SELECT ?category WHERE { &lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; ?category }&quot;;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This string query can then be used by the ExecuteQuery() method to create an XDocument from the SPARQL results (See </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/rdf-sparql-XMLres/" target="_blank" styleclass="Normal" translate="true">http://www.w3.org/TR/rdf-sparql-XMLres/</link><text styleclass="Normal" translate="true"> for the XML format returned). We can then loop through the results to print out each category that the query returned.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var result = XDocument.Load(client.ExecuteQuery(storeName, query));</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">foreach (var sparqlResultRow in result.SparqlResultRows())</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; var val = sparqlResultRow.GetColumnValue(&quot;category&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; Console.WriteLine(&quot;Category is &quot; + val);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Using extension methods</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Deleting data</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Deletion is done by matching patterns of triples to be deleted. The following example deletes all the category data about BrightstarDB, again we use the StringBuilder to create the delete pattern.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var deletePatternsData = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">deletePatternsData.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/.well-known/model/wildcard&gt; .&quot;);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The delete pattern uses a special Resource that can be used as a wildcard: </text><text styleclass="Code Example" translate="true">http://www.brightstardb.com/.well-known/model/wildcard</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The ExecuteTransaction() method is used to delete the data from the store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.ExecuteTransaction(storeName, deletePatternsData.ToString(), null);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Datatypes</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the code above we used simple triples to add a literal object to a subject, such as:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/name&gt; &quot;Brightstar DB&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Other datatypes can be used by using the ^^ syntax:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/productCode&gt; &quot;640&quot;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; .</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/releaseDate&gt; &quot;2011-11-11 12:00&quot;^^&lt;http://www.w3.org/2001/XMLSchema#dateTime&gt; .</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/cost&gt; &quot;0.00&quot;^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; .</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
