<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Developer Quick Start</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Developer Quick Start</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB is about giving developers a really powerful, quick and clean experience in defining and realizing persistent object systems on .NET. To achieve this BrightstarDB can use a set of interface definitions with simple annotations to generate a full LINQ capable object model that stores object state in a BrightstarDB instance. In this quick introduction we will show how to create a new data model in Visual Studio, create a new BrightstarDB store and populate it with data. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">The source code for this example can be found in [INSTALLDIR]\Samples\Embedded\EntityFramework\EntityFrameworkSamples.sln</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">A New Project</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Create a new project in Visual Studio. For this example we chose a command line application. After creating the project ensure the build target is set to &#160;&apos;.NET Framework 4&apos; and that the Platform Target is set to &apos;Any CPU&apos;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the solution explorer right click and add a new item. Choose the &apos;Brightstar Entity Context&apos; from the list.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><image src="getting-started-add-entity-context.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The project will now show a new component has been added called &quot;MyEntityContext.tt&quot;. On the project references right click and add references. Browse to the [INSTALLDIR]\SDK\net40 folder and include all the &quot;.dll&quot; files that are there.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating the Model</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In this sample we will create a data model that contains actors and films. An actor has a name and a date of birth. An actor can star in many films and each film has many actors. Films also have name property.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The BrightstarDB Entity Framework requires you to define the data model as a set of .NET interface definitions. &#160;You can either write these interfaces entirely by hand or you can use the Brightstar Entity Definition item template. Again, right-click on the solution item in the project explorer window and add a new item, this time from the displayed list choose Brightstar Entity Definition and change the name of the file to IActor.cs.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Add the following code to that file:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public interface IActor</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160;string Name { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160;DateTime DateOfBirth { get; set; } &#160;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160;ICollection&lt;IFilm&gt; Films { get; set; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Then add another Brightstar Entity Definition named IFilm.cs and include the following code:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public interface IFilm</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">string Name { get; }</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">[InverseProperty(&quot;Films&quot;)]</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">ICollection&lt;IActor&gt; Actors { get; }</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Generating the Context and Classes</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A context is a manager for objects in a store. It provides an entry point for running LINQ queries and creating new objects. The context and implementing classes are automatically generated from the interface definitions. To create a context, right click on the MyEntityContext.tt file and select &quot;Run custom tool&quot;. This updates the MyEntityContext.cs to contain the context class and also classes that implement the specified interfaces.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">The context is not automatically rebuilt on every build. After making a change to the interface definitions it is necessary to run the custom tool again.</text></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Using the Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The context can be used inside any .NET application or web service. The commented code below shows how to initialize a context and then use that context to create and persist data. It concludes by showing how to query the database using LINQ.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System.Collections.Generic;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System.Linq;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using System.Text;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">using BrightstarDB.Client;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">namespace GettingStarted</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;class Program</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;static void Main(string[] args)</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;{</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// define a connection string</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;const string connectionString = &quot;type=http;endpoint=http://localhost:8090/brightstar;storeName=Films&quot;;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// if the store does not exist it will be automatically </text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// created when a context is created</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var ctx = new MyEntityContext(connectionString);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// create some films</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var bladeRunner = ctx.Films.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;bladeRunner.Name = &quot;BladeRunner&quot;;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var starWars = ctx.Films.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;starWars.Name = &quot;Star Wars&quot;;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// create some actors and connect them to films</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var ford = ctx.Actors.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ford.Name = &quot;Harrison Ford&quot;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ford.DateOfBirth = new DateTime(1942, 7, 13);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ford.Films.Add(starWars);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ford.Films.Add(bladeRunner);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var hamill = ctx.Actors.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;hamill.Name = &quot;Mark Hamill&quot;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;hamill.DateOfBirth = new DateTime(1951, 9, 25);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;hamill.Films.Add(starWars);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// save the data</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ctx.SaveChanges();</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// open a new context, not required</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ctx = new MyEntityContext(store);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// find an actor via LINQ</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;ford = ctx.Actors.Where(a =&gt; a.Name.Equals(&quot;Harrison Ford&quot;)).FirstOrDefault();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var dob = ford.DateOfBirth;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// list his films</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var films = ford.Films;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// get star wars</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;var sw = films.Where(f =&gt; f.Name.Equals(&quot;Star Wars&quot;)).FirstOrDefault();</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;// list actors in star wars</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;foreach (var actor in sw.Actors)</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;var actorName = actor.Name;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;Console.WriteLine(actorName);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;Console.ReadLine();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Optimistic Locking</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Optimistic Locking is a way of handling concurrency control, meaning that multiple transactions can complete without affecting each other. If Optimistic Locking is turned on, then when a transaction tries to save data to the store, it first checks that the underlying data has not been modified by a different transaction. If it finds that the data has been modified, then the transaction will fail to complete.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB has the option to turn on optimistic locking when connecting to the store. This is done by setting the enableOptimisticLocking flag when opening a context such as below:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">ctx = new MyEntityContext(connectionString, true);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var newFilm = ctx.Films.Create();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">ctx.SaveChanges();</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var newFilmId = newFilm.Id;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">//use optimistic locking when creating a new context</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var ctx1 = new MyEntityContext(connectionString, true);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var ctx2 = new MyEntityContext(connectionString, true);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">//create a film in the first context</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var film1 = ctx1.Films.Where(f =&gt; f.Id.Equals(newFilmId)).FirstOrDefault();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Console.WriteLine(&quot;First context has film with ID &apos;{0}&apos;&quot;, film1.Id);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">//create a film in the second context</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var film2 = ctx2.Films.Where(f =&gt; f.Id.Equals(newFilmId)).FirstOrDefault();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Console.WriteLine(&quot;Second context has film with ID &apos;{0}&apos;&quot;, film2.Id);</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">//attempt to change the data from both contexts</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">film1.Name = &quot;Raiders of the Lost Ark&quot;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">film2.Name = &quot;American Graffiti&quot;;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">//save the data to the store</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">try</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">ctx1.SaveChanges();</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">Console.WriteLine(&quot;Successfully updated the film to &apos;{0}&apos; in the store&quot;, film1.Name);</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">ctx2.SaveChanges();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">catch (Exception ex)</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">Console.WriteLine(&quot;Unable to save data to the store, as the underlying data has been modified.&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Console.ReadLine();</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Optimistic Locking can also be enabled in the configuration using the BrightstarDB.EnableOptimisticLocking application setting</text></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Server Side Caching</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When enabled, query results are stored on disk until an update is made. If the same query is executed, the cached result is returned. Cached results are stored in the Windows temporary folder, and deleted when an update is made to the store.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Server side caching is enabled by default, but can be disabled by adding the appSetting below to the application configuration file:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&lt;add key=&quot;BrightstarDB.EnableServerSideCaching&quot; value=&quot;false&quot; /&gt;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Server side caching is not supported on BrightstarDB for Windows Phone 7.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">What Next?</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">While this is just a short introduction it has covered a lot of how BrightstarDB works. The following sections provide some more conceptual details on how the store works, more details on the Entity Framework and how to work with BrightstarDB as a triple store.</text></para>
  </body>
</topic>
