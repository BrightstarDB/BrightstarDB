<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="kal_000" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">INotifyPropertyChanged and INotifyCollectionChanged Support</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">INotifyPropertyChanged and INotifyCollectionChanged Support</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The classes generated by the Entity Framework provide support for tracking local changes. All generated entity classes implement the </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged%28v=vs.100%29.aspx" target="_blank" styleclass="Normal" translate="true">System.ComponentModel.INotifyPropertyChanged</link><text styleclass="Normal" translate="true"> interface and fire a notification event any time a property with a single value is modified. All collections exposed by the generated classes implement the </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.inotifycollectionchanged%28v=vs.100%29.aspx" target="_blank" styleclass="Normal" translate="true">System.Collections.Specialized.INotifyCollectionChanged</link><text styleclass="Normal" translate="true"> interface and fire a notification when an item is added to or removed from the collection or when the collection is reset.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">There are a few points to note about using these features with the Entity Framework:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Firstly, although the generated classes implement the INotifyPropertyChanged interface, your code will typically use the interfaces. To attach a handler to the PropertyChanged event, you need an instance of INotifyPropertyChanged in your code. There are two ways to achieve this - either by casting or by adding INotifyPropertyChanged to your entity interface. If casting you will need to write code like this:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// Get an entity to listen to</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var person = _context.Persons.Where(x=&gt;x.Name.Equals(&quot;Fred&quot;)).FirstOrDefault();</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// Attach the NotifyPropertyChanged event handler</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">(person as INotifyPropertyChanged).PropertyChanged += HandlePropertyChanged;</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Alternatively it can be easier to simply add the INotifyPropertyChanged interface to your entity interface like this:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[Entity]</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">public interface IPerson : INotifyPropertyChanged </text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160;// Property definitions go here</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This enables you to then write code without the cast:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// Get an entity to listen to</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var person = _context.Persons.Where(x=&gt;x.Name.Equals(&quot;Fred&quot;)).FirstOrDefault();</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">// Attach the NotifyPropertyChanged event handler</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">person.PropertyChanged += HandlePropertyChanged;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When tracking changes to collections you should also be aware that the dynamically loaded nature of these collections means that sometimes it is not possible for the change tracking code to provide you with the object that was removed from a collection. This will typically happen when you have a collection one one entity that is the inverse of a collection or property on another entity. Updating the collection at one end will fire the </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.inotifycollectionchanged.collectionchanged%28v=vs.100%29.aspx" target="_blank" styleclass="Normal" translate="true">CollectionChanged</link><text styleclass="Normal" translate="true"> event on the inverse collection, but if the inverse collection is not yet loaded, the event will be raised as a </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.notifycollectionchangedaction%28v=vs.100%29.aspx" target="_blank" styleclass="Normal" translate="true">NotifyCollectionChangedAction.Reset</link><text styleclass="Normal" translate="true"> type event, rather than a </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.notifycollectionchangedaction%28v=vs.100%29.aspx" target="_blank" styleclass="Normal" translate="true">NotifyCollectionChangedAction.Remove</link><text styleclass="Normal" translate="true"> event. This is done to avoid the overhead of retrieving the removed object from the data store just for the purpose of raising the notification event.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Finally, please note that event handlers are attached only to the local entity objects, the handlers are not persisted when the context changes are saved and are not available to any new context&apos;s you create - these handlers are intended only for tracking changes made locally to properties in the context before a SaveChanges() is invoked. The properties are also useful for data binding in applications where you want the user interface to update as the properties are modified.</text></para>
  </body>
</topic>
