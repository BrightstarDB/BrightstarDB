<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">RDF Client API</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">RDF Client API</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The RDF Client API provides a simple set of methods for creating and deleting stores, executing transactions and running queries. It should be used when the application needs to deal directly &#160;with RDF data. &#160;A RDF Client can connect to an embedded store or remotely to a running BrightstarDB instance.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating a client</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The BrightstarService class provides a number of static methods that can be used to create a new client. The most general one takes a connection string as a parameter and returns a client object. The client implements BrightstarDB.IBrightstarService. </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The following example shows how to create a new service client using a connection string:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var client = BrightstarService.GetClient(&quot;Type=http;endpoint=http://localhost:8090/brightstar;&quot;);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For more information about connection strings, please read the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Connection_Strings" anchor="connectionstrings" styleclass="Normal" translate="true">&quot;Connection Strings&quot; topic</link></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating a Store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A new store can be creating using the following code:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">string storeName = &quot;Store_&quot; + Guid.NewGuid();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.CreateStore(storeName);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Deleting a Store</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Deleting a store is also straight forward:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.DeleteStore(storeName);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Adding data</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Data is added to the store by sending the data to add in N-Triples format. Each triple must be on a single line with no line breaks, a good way to do this is to use a StringBuilder and then using AppendLine for each triple:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var data = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/name&gt; \&quot;BrightstarDB\&quot; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/categories/nosql&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/categories/.net&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">data.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/categories/rdf&gt; .&quot;);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The ExecuteTransaction() method is used to insert the N-Triples data into the store:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.ExecuteTransaction(storeName,null, null, data.ToString());</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Querying data using SPARQL</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB supports </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/sparql11-query/" target="_blank" styleclass="Normal" translate="true">SPARQL 1.1</link><text styleclass="Normal" translate="true"> for querying the data in the store. A simple query on the N-Triples above that returns all categories that the subject called &quot;Brightstar DB&quot; is connected to would look like this:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var query = &quot;SELECT ?category WHERE { &lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; ?category }&quot;;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This string query can then be used by the ExecuteQuery() method to create an XDocument from the SPARQL results (See </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/rdf-sparql-XMLres/" target="_blank" styleclass="Normal" translate="true">http://www.w3.org/TR/rdf-sparql-XMLres/</link><text styleclass="Normal" translate="true"> for the XML format returned). </text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var result = XDocument.Load(client.ExecuteQuery(storeName, query));</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB supports several different formats for SPARQL results. The default format is XML, but you can also add a BrightstarDB.SparqlResultsFormat parameter to the ExecuteQuery method to control the format and encoding of the results set. For example:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var jsonResult = client.ExecuteQuery(storeName, query, SparqlResultsFormat.Json);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">By default results are returned using UTF-8 encoding; however you can override this default behaviour by using the WithEncoding() method on the SparqlResultsFormat class. The WithEncoding() method takes a System.Text.Encoding instance and returns a SparqlResultsFormat instance that will ask for that specific encoding.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var unicodeXmlResult = client.ExecuteQuery(storeName, query, SparqlResultsFormat.Xml.WithEncoding(Encoding.Unicode));</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Update data using SPARQL</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BrightstarDB supports </text><link displaytype="text" defaultstyle="true" type="weblink" href="http://www.w3.org/TR/sparql11-update/" target="_blank" styleclass="Normal" translate="true">SPARQL 1.1 Update</link><text styleclass="Normal" translate="true"> for updating data in the store. An update operation is submitted to BrightstarDB as a job. By default the call to ExecuteUpdate will block until the update job completes:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">IJobInfo jobInfo = _client.ExecuteUpdate(storeName, updateExpression);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In this case, the resulting IJobInfo object will describe the final state of the update job. However, you can also run the job asynchronously by passing false for the optional waitForCompletion parameter:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">IJobInfo jobInfo = _client.ExecuteUpdate(storeName, updateExpression, false);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In this case the resulting IJobInfo object will describe the current state of the update job and you can use calls to GetJobInfo to poll the job for its current status.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Using extension methods</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To make working with the resulting XDocument easier there exist a number of extensions methods. The first method is called XDocument.SparqlResultRows() and returns XElements where each XElement represents a single result row.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">foreach (var sparqlResultRow in result.SparqlResultRows())</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">{</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; var val = sparqlResultRow.GetColumnValue(&quot;category&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; Console.WriteLine(&quot;Category is &quot; + val);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">}</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">GetColumnValue takes the name of the SPARQL result column and returns the string value. There are also methods to test if the object is a literal, IsLiteral(string column), and retrieve the data type and language code.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Deleting data</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Deletion is done by defining a pattern that should matching the triples to be deleted. The following example deletes all the category data about BrightstarDB, again we use the StringBuilder to create the delete pattern.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var deletePatternsData = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">deletePatternsData.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/category&gt; &lt;http://www.brightstardb.com/.well-known/model/wildcard&gt; .&quot;);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The delete pattern uses a special Resource identifier that can be used as a wildcard: </text><text styleclass="Code Example" translate="true">http://www.brightstardb.com/.well-known/model/wildcard</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The ExecuteTransaction() method is used to delete the data from the store</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.ExecuteTransaction(storeName, null, deletePatternsData.ToString(), null);</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">ExecuteTransaction is blocking by default. To run asynchronously an additional parameter can be passed in.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Data Types</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the code above we used simple triples to add a literal object to a subject, such as:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/name&gt; &quot;BrightstarDB&quot;</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Other data types can be used by using the ^^ syntax:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/productCode&gt; &quot;640&quot;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; .</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/releaseDate&gt; &quot;2011-11-11 12:00&quot;^^&lt;http://www.w3.org/2001/XMLSchema#dateTime&gt; .</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/cost&gt; &quot;0.00&quot;^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; .</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Conditional Updates</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The execution of a transaction can be made conditional on certain triples existing in the store. The following example updates the productCode property of a resource only if its current value is 640.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var preconditions = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">preconditions.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/productCode&gt; &quot;640&quot;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var deletes = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">preconditions.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/productCode&gt; &quot;640&quot;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">var inserts = new StringBuilder();</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">preconditions.AppendLine(&quot;&lt;http://www.brightstardb.com/products/brightstar&gt; &lt;http://www.brightstardb.com/schemas/product/productCode&gt; &quot;973&quot;^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; .&quot;);</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.ExecuteTransaction(storeName, preconditions.ToString(), deletes.ToString(), inserts.ToString());</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When a transaction contains condition triples, every triple specified in the preconditions must exist in the store before the transaction is applied. If one or more triples specified in the preconditions are not found, a BrightstarClientException will be raised.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Data Imports</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To support the loading of large data sets BrightstarDB provides an import function. Before invoking the import function via the client API the data to be imported should be copied into a folder called &apos;import&apos;. The &apos;import&apos; folder should be located in the folder containing the BrigtstarDB store data folders. After a default installation the stores folder is [INSTALLDIR]\Data, thus the import folder should be [INSTALLDIR]\Data\import. For information about the RDF syntaxes that BrightstarDB supports for import, please refer to </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Supported_RDF_Syntaxes" styleclass="Normal" translate="true">Supported RDF Syntaxes</link><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">With the data copied into the folder the following client method can be called. The parameter is the name of the file that was copied into the import folder.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">client.StartImport(&quot;data.nt&quot;);</text></para>
  </body>
</topic>
