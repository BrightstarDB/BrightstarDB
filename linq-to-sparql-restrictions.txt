Method:				Status:
Aggregate			Not supported
All					Not supported
Any					Not supported
AsQueryable			Not supported
Average				Supported - convert to SPARQL AVERAGE in projection
Cast				Supported for casting between entity types only
Concat				Not supported
Contains			Supported for literal values only
Count				Supported - convert to SPARQL COUNT in projection
Count with filter 	Supported - convert to SPARQL COUNT in projection with filter in body
DefaultIfEmpty		NotSupported
Distinct<TSource>(IQueryable<TSource>)		Supported - convert to SPARQL DISTINCT
Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)	Not Supported
ElementAt			NotSupported
ElementAtOrDefault	NotSupported
Except				NotSupported
First<TSource>(IQueryable<TSource>)			Supported - convert to LIMIT 1
First<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)		Supported - convert to LIMIT 1 with a FILTER
FirstOrDefault		NotSupported
GroupBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)	Supported - convert to GROUP BY
Other GroupBy		NotSupported
GroupJoin			NotSupported
Intersect			NotSupported
Join				NotSupported
Last				NotSupported
LastOrDefault		NotSupported
LongCount			Supported - convert to SPARQL COUNT in projection and parse as long
LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)	Supported - convert to SPARQL COUNT with FILTER
Max<TSource>(IQueryable<TSource>)	- Not supported
Max<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) - convert to SPARQL MAX(*expression*)
Min<TSource>(IQueryable<TSource>)	- Not supported
Min<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) - convert to SPARQL MIN(*expression*)
OfType<TResult>		Supported if TResult is an entity type
OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)	Supported
OrderBy<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>) Not Supported
OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>)	Supported
OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>) Not Supported
Reverse				NotSupported
Select<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)	Supported
Select<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, Int32, TResult>>) NotSupported
SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>)	Supported
SelectMany<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, Int32, TResult>>) NotSupported
SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<Func<TSource, IEnumerable<TCollection>>>, Expression<Func<TSource, TCollection, TResult>>) NotSupported
SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expression<Func<TSource, TCollection, TResult>>) NotSupported
SequenceEqual	NotSupported
Single<TSource>(IQueryable<TSource>)	Supported
Single<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>)	Supported	
SingleOrDefault<TSource>(IQueryable<TSource>)	Supported
SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Supported
Skip<TSource>	Supported
SkipWhile		NotSupported
Sum				Supported
Take			Supported
TakeWhile		NotSupported
ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>)	Supported
ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)	NotSupported
ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>)	Supported
ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource, TKey>>, IComparer<TKey>)	NotSupported
Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)	NotSupported
Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)	NotSupported
Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>) Supported
Where<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32, Boolean>>) NotSupported
Zip	NotSupported